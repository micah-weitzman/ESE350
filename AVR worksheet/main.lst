
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000013c  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006e4  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000653  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000124  00000000  00000000  00000f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002e6  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  0000140a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 92 00 	call	0x124	; 0x124 <main>
  88:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_13>:
#include "iocompat.h"          

enum { UP, DOWN };

ISR (TIMER1_OVF_vect)           
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
    static uint16_t pwm;        // The PWM is being used in 10-bit mode, so we need a 16-bit variable to remember the current value.
    static uint8_t direction;

    switch (direction)         // This section determines the new value of the PWM
  a0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <direction.1610>
  a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ac:	22 23       	and	r18, r18
  ae:	69 f0       	breq	.+26     	; 0xca <__vector_13+0x3a>
  b0:	21 30       	cpi	r18, 0x01	; 1
  b2:	a9 f4       	brne	.+42     	; 0xde <__vector_13+0x4e>
    {
        case 1:
            if (++pwm == TIMER1_TOP)
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  be:	8f 3f       	cpi	r24, 0xFF	; 255
  c0:	93 40       	sbci	r25, 0x03	; 3
  c2:	69 f4       	brne	.+26     	; 0xde <__vector_13+0x4e>
                direction = 0;
  c4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <direction.1610>
  c8:	0a c0       	rjmp	.+20     	; 0xde <__vector_13+0x4e>
            break;

        case 0:
            if (--pwm == 0)
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	89 2b       	or	r24, r25
  d6:	19 f4       	brne	.+6      	; 0xde <__vector_13+0x4e>
                direction = 1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <direction.1610>
            break;
    }

    OCR = pwm;                  // Newly computed value is loaded into the PWM register
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	2f 91       	pop	r18
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <ioinit>:

void
ioinit (void)                   // Called after a reset to initialize PWM and enable interrupts
{
    /* Timer 1 is 10-bit PWM (8-bit PWM on some ATtinys). */
    TCCR1A = TIMER1_PWM_INIT;
  fe:	83 e8       	ldi	r24, 0x83	; 131
 100:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     * Start timer 1.
     *
     * NB: TCCR1A and TCCR1B could actually be the same register, so
     * take care to not clobber it.
     */
    TCCR1B |= TIMER1_CLOCKSOURCE;
 104:	e1 e8       	ldi	r30, 0x81	; 129
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	80 83       	st	Z, r24
#if defined(TIMER1_SETUP_HOOK)
    TIMER1_SETUP_HOOK();
#endif

    /* Set PWM value to 0. */
    OCR = 0;
 10e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 112:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

    /* Enable OC1 as output. */
    DDROC = _BV (OC1);
 116:	80 e2       	ldi	r24, 0x20	; 32
 118:	84 b9       	out	0x04, r24	; 4

    /* Enable timer 1 overflow interrupt. */
    TIMSK = _BV (TOIE1);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    sei ();
 120:	78 94       	sei
 122:	08 95       	ret

00000124 <main>:
}

int main (void)
{

    ioinit ();
 124:	0e 94 7f 00 	call	0xfe	; 0xfe <ioinit>

    /* loop forever, the interrupts are doing the rest */

    for (;;)                    // All work is done in interrupt routine
        sleep_mode();
 128:	83 b7       	in	r24, 0x33	; 51
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	83 bf       	out	0x33, r24	; 51
 12e:	88 95       	sleep
 130:	83 b7       	in	r24, 0x33	; 51
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	83 bf       	out	0x33, r24	; 51
 136:	f8 cf       	rjmp	.-16     	; 0x128 <main+0x4>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
