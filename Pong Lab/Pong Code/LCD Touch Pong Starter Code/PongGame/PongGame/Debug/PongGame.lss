
PongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000418  00800100  00001138  000011ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b18  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009a6  00000000  00000000  00003244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008b5  00000000  00000000  00003bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c8  00000000  00000000  000044a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000517  00000000  00000000  00004868  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001683  00000000  00000000  00004d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00006402  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b2 02 	jmp	0x564	; 0x564 <__ctors_end>
       4:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
       8:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
       c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      10:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      14:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      18:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      1c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      20:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      24:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      28:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      2c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      30:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      34:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      38:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      3c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      40:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      44:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      48:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      4c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      50:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      54:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      58:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      5c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      60:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      64:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 7c       	andi	r16, 0xC0	; 192
      6e:	da f2       	brmi	.-74     	; 0x26 <__FUSE_REGION_LENGTH__+0x23>
      70:	da 7c       	andi	r29, 0xCA	; 202
      72:	7c d6       	rcall	.+3320   	; 0xd6c <main+0x82>
      74:	f2 d6       	rcall	.+3556   	; 0xe5a <__addsf3x+0x2c>
      76:	7c 38       	cpi	r23, 0x8C	; 140
      78:	7c 3e       	cpi	r23, 0xEC	; 236
      7a:	7c 38       	cpi	r23, 0x8C	; 140
      7c:	18 3c       	cpi	r17, 0xC8	; 200
      7e:	7e 3c       	cpi	r23, 0xCE	; 206
      80:	18 38       	cpi	r17, 0x88	; 136
      82:	ea be       	out	0x3a, r14	; 58
      84:	ea 38       	cpi	r30, 0x8A	; 138
      86:	38 7a       	andi	r19, 0xA8	; 168
      88:	fe 7a       	andi	r31, 0xAE	; 174
      8a:	38 00       	.word	0x0038	; ????
      8c:	18 3c       	cpi	r17, 0xC8	; 200
      8e:	18 00       	.word	0x0018	; ????
      90:	ff e7       	ldi	r31, 0x7F	; 127
      92:	c3 e7       	ldi	r28, 0x73	; 115
      94:	ff 00       	.word	0x00ff	; ????
      96:	18 24       	eor	r1, r8
      98:	18 00       	.word	0x0018	; ????
      9a:	ff e7       	ldi	r31, 0x7F	; 127
      9c:	db e7       	ldi	r29, 0x7B	; 123
      9e:	ff 0c       	add	r15, r15
      a0:	12 5c       	subi	r17, 0xC2	; 194
      a2:	60 70       	andi	r22, 0x00	; 0
      a4:	64 94       	.word	0x9464	; ????
      a6:	9e 94 64 02 	call	0x2404c8	; 0x2404c8 <__TEXT_REGION_LENGTH__+0x2384c8>
      aa:	fe a0       	ldd	r15, Y+38	; 0x26
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	02 fe       	sbrs	r0, 2
      b0:	a0 a4       	ldd	r10, Z+40	; 0x28
      b2:	fc 5a       	subi	r31, 0xAC	; 172
      b4:	3c e7       	ldi	r19, 0x7C	; 124
      b6:	3c 5a       	subi	r19, 0xAC	; 172
      b8:	fe 7c       	andi	r31, 0xCE	; 206
      ba:	38 38       	cpi	r19, 0x88	; 136
      bc:	10 10       	cpse	r1, r0
      be:	38 38       	cpi	r19, 0x88	; 136
      c0:	7c fe       	.word	0xfe7c	; ????
      c2:	28 44       	sbci	r18, 0x48	; 72
      c4:	fe 44       	sbci	r31, 0x4E	; 78
      c6:	28 fa       	.word	0xfa28	; ????
      c8:	fa 00       	.word	0x00fa	; ????
      ca:	fa fa       	.word	0xfafa	; ????
      cc:	60 90 fe 80 	lds	r6, 0x80FE	; 0x8080fe <__bss_end+0x7be6>
      d0:	fe 00       	.word	0x00fe	; ????
      d2:	66 91       	elpm	r22, Z
      d4:	a9 56       	subi	r26, 0x69	; 105
      d6:	06 06       	cpc	r0, r22
      d8:	06 06       	cpc	r0, r22
      da:	06 29       	or	r16, r6
      dc:	45 ff       	sbrs	r20, 5
      de:	45 29       	or	r20, r5
      e0:	10 20       	and	r1, r0
      e2:	7e 20       	and	r7, r14
      e4:	10 08       	sbc	r1, r0
      e6:	04 7e       	andi	r16, 0xE4	; 228
      e8:	04 08       	sbc	r0, r4
      ea:	10 10       	cpse	r1, r0
      ec:	54 38       	cpi	r21, 0x84	; 132
      ee:	10 10       	cpse	r1, r0
      f0:	38 54       	subi	r19, 0x48	; 72
      f2:	10 10       	cpse	r1, r0
      f4:	78 08       	sbc	r7, r8
      f6:	08 08       	sbc	r0, r8
      f8:	08 30       	cpi	r16, 0x08	; 8
      fa:	78 30       	cpi	r23, 0x08	; 8
      fc:	78 30       	cpi	r23, 0x08	; 8
      fe:	0c 1c       	adc	r0, r12
     100:	7c 1c       	adc	r7, r12
     102:	0c 60       	ori	r16, 0x0C	; 12
     104:	70 7c       	andi	r23, 0xC0	; 192
     106:	70 60       	ori	r23, 0x00	; 0
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	00 fa       	bst	r0, 0
     110:	00 00       	nop
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	00 e0       	ldi	r16, 0x00	; 0
     116:	00 28       	or	r0, r0
     118:	fe 28       	or	r15, r14
     11a:	fe 28       	or	r15, r14
     11c:	24 54       	subi	r18, 0x44	; 68
     11e:	fe 54       	subi	r31, 0x4E	; 78
     120:	48 c4       	rjmp	.+2192   	; 0x9b2 <fillrect+0x40>
     122:	c8 10       	cpse	r12, r8
     124:	26 46       	sbci	r18, 0x66	; 102
     126:	6c 92       	st	X, r6
     128:	6a 04       	cpc	r6, r10
     12a:	0a 00       	.word	0x000a	; ????
     12c:	10 e0       	ldi	r17, 0x00	; 0
     12e:	c0 00       	.word	0x00c0	; ????
     130:	00 38       	cpi	r16, 0x80	; 128
     132:	44 82       	std	Z+4, r4	; 0x04
     134:	00 00       	nop
     136:	82 44       	sbci	r24, 0x42	; 66
     138:	38 00       	.word	0x0038	; ????
     13a:	54 38       	cpi	r21, 0x84	; 132
     13c:	fe 38       	cpi	r31, 0x8E	; 142
     13e:	54 10       	cpse	r5, r4
     140:	10 7c       	andi	r17, 0xC0	; 192
     142:	10 10       	cpse	r1, r0
     144:	00 01       	movw	r0, r0
     146:	0e 0c       	add	r0, r14
     148:	00 10       	cpse	r0, r0
     14a:	10 10       	cpse	r1, r0
     14c:	10 10       	cpse	r1, r0
     14e:	00 00       	nop
     150:	06 06       	cpc	r0, r22
     152:	00 04       	cpc	r0, r0
     154:	08 10       	cpse	r0, r8
     156:	20 40       	sbci	r18, 0x00	; 0
     158:	7c 8a       	std	Y+20, r7	; 0x14
     15a:	92 a2       	std	Z+34, r9	; 0x22
     15c:	7c 00       	.word	0x007c	; ????
     15e:	42 fe       	sbrs	r4, 2
     160:	02 00       	.word	0x0002	; ????
     162:	4e 92       	st	-X, r4
     164:	92 92       	st	-Z, r9
     166:	62 84       	ldd	r6, Z+10	; 0x0a
     168:	82 92       	st	-Z, r8
     16a:	b2 cc       	rjmp	.-1692   	; 0xfffffad0 <__eeprom_end+0xff7efad0>
     16c:	18 28       	or	r1, r8
     16e:	48 fe       	.word	0xfe48	; ????
     170:	08 e4       	ldi	r16, 0x48	; 72
     172:	a2 a2       	std	Z+34, r10	; 0x22
     174:	a2 9c       	mul	r10, r2
     176:	3c 52       	subi	r19, 0x2C	; 44
     178:	92 92       	st	-Z, r9
     17a:	8c 82       	std	Y+4, r8	; 0x04
     17c:	84 88       	ldd	r8, Z+20	; 0x14
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	6c 92       	st	X, r6
     182:	92 92       	st	-Z, r9
     184:	6c 62       	ori	r22, 0x2C	; 44
     186:	92 92       	st	-Z, r9
     188:	94 78       	andi	r25, 0x84	; 132
     18a:	00 00       	nop
     18c:	28 00       	.word	0x0028	; ????
     18e:	00 00       	nop
     190:	02 2c       	mov	r0, r2
     192:	00 00       	nop
     194:	00 10       	cpse	r0, r0
     196:	28 44       	sbci	r18, 0x48	; 72
     198:	82 28       	or	r8, r2
     19a:	28 28       	or	r2, r8
     19c:	28 28       	or	r2, r8
     19e:	00 82       	st	Z, r0
     1a0:	44 28       	or	r4, r4
     1a2:	10 40       	sbci	r17, 0x00	; 0
     1a4:	80 9a       	sbi	0x10, 0	; 16
     1a6:	90 60       	ori	r25, 0x00	; 0
     1a8:	7c 82       	std	Y+4, r7	; 0x04
     1aa:	ba 9a       	sbi	0x17, 2	; 23
     1ac:	72 3e       	cpi	r23, 0xE2	; 226
     1ae:	48 88       	ldd	r4, Y+16	; 0x10
     1b0:	48 3e       	cpi	r20, 0xE8	; 232
     1b2:	fe 92       	st	-X, r15
     1b4:	92 92       	st	-Z, r9
     1b6:	6c 7c       	andi	r22, 0xCC	; 204
     1b8:	82 82       	std	Z+2, r8	; 0x02
     1ba:	82 44       	sbci	r24, 0x42	; 66
     1bc:	fe 82       	std	Y+6, r15	; 0x06
     1be:	82 82       	std	Z+2, r8	; 0x02
     1c0:	7c fe       	.word	0xfe7c	; ????
     1c2:	92 92       	st	-Z, r9
     1c4:	92 82       	std	Z+2, r9	; 0x02
     1c6:	fe 90       	ld	r15, -X
     1c8:	90 90 80 7c 	lds	r9, 0x7C80	; 0x807c80 <__bss_end+0x7768>
     1cc:	82 82       	std	Z+2, r8	; 0x02
     1ce:	8a ce       	rjmp	.-748    	; 0xfffffee4 <__eeprom_end+0xff7efee4>
     1d0:	fe 10       	cpse	r15, r14
     1d2:	10 10       	cpse	r1, r0
     1d4:	fe 00       	.word	0x00fe	; ????
     1d6:	82 fe       	sbrs	r8, 2
     1d8:	82 00       	.word	0x0082	; ????
     1da:	04 02       	muls	r16, r20
     1dc:	82 fc       	sbrc	r8, 2
     1de:	80 fe       	sbrs	r8, 0
     1e0:	10 28       	or	r1, r0
     1e2:	44 82       	std	Z+4, r4	; 0x04
     1e4:	fe 02       	muls	r31, r30
     1e6:	02 02       	muls	r16, r18
     1e8:	02 fe       	sbrs	r0, 2
     1ea:	40 38       	cpi	r20, 0x80	; 128
     1ec:	40 fe       	sbrs	r4, 0
     1ee:	fe 20       	and	r15, r14
     1f0:	10 08       	sbc	r1, r0
     1f2:	fe 7c       	andi	r31, 0xCE	; 206
     1f4:	82 82       	std	Z+2, r8	; 0x02
     1f6:	82 7c       	andi	r24, 0xC2	; 194
     1f8:	fe 90       	ld	r15, -X
     1fa:	90 90 60 7c 	lds	r9, 0x7C60	; 0x807c60 <__bss_end+0x7748>
     1fe:	82 8a       	std	Z+18, r8	; 0x12
     200:	84 7a       	andi	r24, 0xA4	; 164
     202:	fe 90       	ld	r15, -X
     204:	98 94       	clz
     206:	62 64       	ori	r22, 0x42	; 66
     208:	92 92       	st	-Z, r9
     20a:	92 4c       	sbci	r25, 0xC2	; 194
     20c:	c0 80       	ld	r12, Z
     20e:	fe 80       	ldd	r15, Y+6	; 0x06
     210:	c0 fc       	sbrc	r12, 0
     212:	02 02       	muls	r16, r18
     214:	02 fc       	sbrc	r0, 2
     216:	f8 04       	cpc	r15, r8
     218:	02 04       	cpc	r0, r2
     21a:	f8 fc       	.word	0xfcf8	; ????
     21c:	02 1c       	adc	r0, r2
     21e:	02 fc       	sbrc	r0, 2
     220:	c6 28       	or	r12, r6
     222:	10 28       	or	r1, r0
     224:	c6 c0       	rjmp	.+396    	; 0x3b2 <__trampolines_end+0x34a>
     226:	20 1e       	adc	r2, r16
     228:	20 c0       	rjmp	.+64     	; 0x26a <__trampolines_end+0x202>
     22a:	86 9a       	sbi	0x10, 6	; 16
     22c:	92 b2       	in	r9, 0x12	; 18
     22e:	c2 00       	.word	0x00c2	; ????
     230:	fe 82       	std	Y+6, r15	; 0x06
     232:	82 82       	std	Z+2, r8	; 0x02
     234:	40 20       	and	r4, r0
     236:	10 08       	sbc	r1, r0
     238:	04 00       	.word	0x0004	; ????
     23a:	82 82       	std	Z+2, r8	; 0x02
     23c:	82 fe       	sbrs	r8, 2
     23e:	20 40       	sbci	r18, 0x00	; 0
     240:	80 40       	sbci	r24, 0x00	; 0
     242:	20 02       	muls	r18, r16
     244:	02 02       	muls	r16, r18
     246:	02 02       	muls	r16, r18
     248:	00 c0       	rjmp	.+0      	; 0x24a <__trampolines_end+0x1e2>
     24a:	e0 10       	cpse	r14, r0
     24c:	00 04       	cpc	r0, r0
     24e:	2a 2a       	or	r2, r26
     250:	1e 02       	muls	r17, r30
     252:	fe 14       	cp	r15, r14
     254:	22 22       	and	r2, r18
     256:	1c 1c       	adc	r1, r12
     258:	22 22       	and	r2, r18
     25a:	22 14       	cp	r2, r2
     25c:	1c 22       	and	r1, r28
     25e:	22 14       	cp	r2, r2
     260:	fe 1c       	adc	r15, r14
     262:	2a 2a       	or	r2, r26
     264:	2a 18       	sub	r2, r10
     266:	00 10       	cpse	r0, r0
     268:	7e 90       	ld	r7, -X
     26a:	40 18       	sub	r4, r0
     26c:	25 25       	eor	r18, r5
     26e:	39 1e       	adc	r3, r25
     270:	fe 10       	cpse	r15, r14
     272:	20 20       	and	r2, r0
     274:	1e 00       	.word	0x001e	; ????
     276:	22 be       	out	0x32, r2	; 50
     278:	02 00       	.word	0x0002	; ????
     27a:	04 02       	muls	r16, r20
     27c:	02 bc       	out	0x22, r0	; 34
     27e:	00 fe       	sbrs	r0, 0
     280:	08 14       	cp	r0, r8
     282:	22 00       	.word	0x0022	; ????
     284:	00 82       	st	Z, r0
     286:	fe 02       	muls	r31, r30
     288:	00 3e       	cpi	r16, 0xE0	; 224
     28a:	20 1e       	adc	r2, r16
     28c:	20 1e       	adc	r2, r16
     28e:	3e 10       	cpse	r3, r14
     290:	20 20       	and	r2, r0
     292:	1e 1c       	adc	r1, r14
     294:	22 22       	and	r2, r18
     296:	22 1c       	adc	r2, r2
     298:	3f 18       	sub	r3, r15
     29a:	24 24       	eor	r2, r4
     29c:	18 18       	sub	r1, r8
     29e:	24 24       	eor	r2, r4
     2a0:	18 3f       	cpi	r17, 0xF8	; 248
     2a2:	3e 10       	cpse	r3, r14
     2a4:	20 20       	and	r2, r0
     2a6:	10 12       	cpse	r1, r16
     2a8:	2a 2a       	or	r2, r26
     2aa:	2a 24       	eor	r2, r10
     2ac:	20 20       	and	r2, r0
     2ae:	fc 22       	and	r15, r28
     2b0:	24 3c       	cpi	r18, 0xC4	; 196
     2b2:	02 02       	muls	r16, r18
     2b4:	04 3e       	cpi	r16, 0xE4	; 228
     2b6:	38 04       	cpc	r3, r8
     2b8:	02 04       	cpc	r0, r2
     2ba:	38 3c       	cpi	r19, 0xC8	; 200
     2bc:	02 0c       	add	r0, r2
     2be:	02 3c       	cpi	r16, 0xC2	; 194
     2c0:	22 14       	cp	r2, r2
     2c2:	08 14       	cp	r0, r8
     2c4:	22 32       	cpi	r18, 0x22	; 34
     2c6:	09 09       	sbc	r16, r9
     2c8:	09 3e       	cpi	r16, 0xE9	; 233
     2ca:	22 26       	eor	r2, r18
     2cc:	2a 32       	cpi	r18, 0x2A	; 42
     2ce:	22 00       	.word	0x0022	; ????
     2d0:	10 6c       	ori	r17, 0xC0	; 192
     2d2:	82 00       	.word	0x0082	; ????
     2d4:	00 00       	nop
     2d6:	ee 00       	.word	0x00ee	; ????
     2d8:	00 00       	nop
     2da:	82 6c       	ori	r24, 0xC2	; 194
     2dc:	10 00       	.word	0x0010	; ????
     2de:	40 80       	ld	r4, Z
     2e0:	40 20       	and	r4, r0
     2e2:	40 3c       	cpi	r20, 0xC0	; 192
     2e4:	64 c4       	rjmp	.+2248   	; 0xbae <fC+0x4>
     2e6:	64 3c       	cpi	r22, 0xC4	; 196
     2e8:	78 85       	ldd	r23, Y+8	; 0x08
     2ea:	85 86       	std	Z+13, r8	; 0x0d
     2ec:	48 5c       	subi	r20, 0xC8	; 200
     2ee:	02 02       	muls	r16, r18
     2f0:	04 5e       	subi	r16, 0xE4	; 228
     2f2:	1c 2a       	or	r1, r28
     2f4:	2a aa       	std	Y+50, r2	; 0x32
     2f6:	9a 84       	ldd	r9, Y+10	; 0x0a
     2f8:	aa aa       	std	Y+50, r10	; 0x32
     2fa:	9e 82       	std	Y+6, r9	; 0x06
     2fc:	84 2a       	or	r8, r20
     2fe:	2a 1e       	adc	r2, r26
     300:	82 84       	ldd	r8, Z+10	; 0x0a
     302:	aa 2a       	or	r10, r26
     304:	1e 02       	muls	r17, r30
     306:	04 2a       	or	r0, r20
     308:	aa 9e       	mul	r10, r26
     30a:	02 30       	cpi	r16, 0x02	; 2
     30c:	78 4a       	sbci	r23, 0xA8	; 168
     30e:	4e 48       	sbci	r20, 0x8E	; 142
     310:	9c aa       	std	Y+52, r9	; 0x34
     312:	aa aa       	std	Y+50, r10	; 0x32
     314:	9a 9c       	mul	r9, r10
     316:	2a 2a       	or	r2, r26
     318:	2a 9a       	sbi	0x05, 2	; 5
     31a:	9c aa       	std	Y+52, r9	; 0x34
     31c:	2a 2a       	or	r2, r26
     31e:	1a 00       	.word	0x001a	; ????
     320:	00 a2       	std	Z+32, r0	; 0x20
     322:	3e 82       	std	Y+6, r3	; 0x06
     324:	00 40       	sbci	r16, 0x00	; 0
     326:	a2 be       	out	0x32, r10	; 50
     328:	42 00       	.word	0x0042	; ????
     32a:	80 a2       	std	Z+32, r8	; 0x20
     32c:	3e 02       	muls	r19, r30
     32e:	0f 94 24 94 	call	0x32848	; 0x32848 <__TEXT_REGION_LENGTH__+0x2a848>
     332:	0f 0f       	add	r16, r31
     334:	14 a4       	ldd	r1, Z+44	; 0x2c
     336:	14 0f       	add	r17, r20
     338:	3e 2a       	or	r3, r30
     33a:	aa a2       	std	Y+34, r10	; 0x22
     33c:	00 04       	cpc	r0, r0
     33e:	2a 2a       	or	r2, r26
     340:	3e 2a       	or	r3, r30
     342:	3e 50       	subi	r19, 0x0E	; 14
     344:	90 fe       	sbrs	r9, 0
     346:	92 4c       	sbci	r25, 0xC2	; 194
     348:	92 92       	st	-Z, r9
     34a:	92 4c       	sbci	r25, 0xC2	; 194
     34c:	4c 12       	cpse	r4, r28
     34e:	12 12       	cpse	r1, r18
     350:	4c 4c       	sbci	r20, 0xCC	; 204
     352:	52 12       	cpse	r5, r18
     354:	12 0c       	add	r1, r2
     356:	5c 82       	std	Y+4, r5	; 0x04
     358:	82 84       	ldd	r8, Z+10	; 0x0a
     35a:	5e 5c       	subi	r21, 0xCE	; 206
     35c:	42 02       	muls	r20, r18
     35e:	04 1e       	adc	r0, r20
     360:	00 b9       	out	0x00, r16	; 0
     362:	05 05       	cpc	r16, r5
     364:	be 9c       	mul	r11, r14
     366:	22 22       	and	r2, r18
     368:	22 9c       	mul	r2, r2
     36a:	bc 02       	muls	r27, r28
     36c:	02 02       	muls	r16, r18
     36e:	bc 3c       	cpi	r27, 0xCC	; 204
     370:	24 ff       	sbrs	r18, 4
     372:	24 24       	eor	r2, r4
     374:	12 7e       	andi	r17, 0xE2	; 226
     376:	92 c2       	rjmp	.+1316   	; 0x89c <drawline+0x82>
     378:	66 d4       	rcall	.+2252   	; 0xc46 <fillcircle+0x1a>
     37a:	f4 3f       	cpi	r31, 0xF4	; 244
     37c:	f4 d4       	rcall	.+2536   	; 0xd66 <main+0x7c>
     37e:	ff 90       	pop	r15
     380:	94 6f       	ori	r25, 0xF4	; 244
     382:	04 03       	mulsu	r16, r20
     384:	11 7e       	andi	r17, 0xE1	; 225
     386:	90 c0       	rjmp	.+288    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     388:	04 2a       	or	r0, r20
     38a:	2a 9e       	mul	r2, r26
     38c:	82 00       	.word	0x0082	; ????
     38e:	00 22       	and	r0, r16
     390:	be 82       	std	Y+6, r11	; 0x06
     392:	0c 12       	cpse	r0, r28
     394:	12 52       	subi	r17, 0x22	; 34
     396:	4c 1c       	adc	r4, r12
     398:	02 02       	muls	r16, r18
     39a:	44 5e       	subi	r20, 0xE4	; 228
     39c:	00 5e       	subi	r16, 0xE0	; 224
     39e:	50 50       	subi	r21, 0x00	; 0
     3a0:	4e be       	out	0x3e, r4	; 62
     3a2:	b0 98       	cbi	0x16, 0	; 22
     3a4:	8c be       	out	0x3c, r8	; 60
     3a6:	64 94       	.word	0x9464	; ????
     3a8:	94 f4       	brge	.+36     	; 0x3ce <__trampolines_end+0x366>
     3aa:	14 64       	ori	r17, 0x44	; 68
     3ac:	94 94       	.word	0x9494	; ????
     3ae:	94 64       	ori	r25, 0x44	; 68
     3b0:	0c 12       	cpse	r0, r28
     3b2:	b2 02       	muls	r27, r18
     3b4:	04 1c       	adc	r0, r4
     3b6:	10 10       	cpse	r1, r0
     3b8:	10 10       	cpse	r1, r0
     3ba:	10 10       	cpse	r1, r0
     3bc:	10 10       	cpse	r1, r0
     3be:	1c f4       	brge	.+6      	; 0x3c6 <__trampolines_end+0x35e>
     3c0:	08 13       	cpse	r16, r24
     3c2:	35 5d       	subi	r19, 0xD5	; 213
     3c4:	f4 08       	sbc	r15, r4
     3c6:	14 2c       	mov	r1, r4
     3c8:	5f 00       	.word	0x005f	; ????
     3ca:	00 de       	rcall	.-1024   	; 0xffffffcc <__eeprom_end+0xff7effcc>
     3cc:	00 00       	nop
     3ce:	10 28       	or	r1, r0
     3d0:	54 28       	or	r5, r4
     3d2:	44 44       	sbci	r20, 0x44	; 68
     3d4:	28 54       	subi	r18, 0x48	; 72
     3d6:	28 10       	cpse	r2, r8
     3d8:	55 00       	.word	0x0055	; ????
     3da:	aa 00       	.word	0x00aa	; ????
     3dc:	55 55       	subi	r21, 0x55	; 85
     3de:	aa 55       	subi	r26, 0x5A	; 90
     3e0:	aa 55       	subi	r26, 0x5A	; 90
     3e2:	aa 55       	subi	r26, 0x5A	; 90
     3e4:	aa 55       	subi	r26, 0x5A	; 90
     3e6:	aa 00       	.word	0x00aa	; ????
     3e8:	00 00       	nop
     3ea:	ff 00       	.word	0x00ff	; ????
     3ec:	08 08       	sbc	r0, r8
     3ee:	08 ff       	.word	0xff08	; ????
     3f0:	00 28       	or	r0, r0
     3f2:	28 28       	or	r2, r8
     3f4:	ff 00       	.word	0x00ff	; ????
     3f6:	08 08       	sbc	r0, r8
     3f8:	ff 00       	.word	0x00ff	; ????
     3fa:	ff 08       	sbc	r15, r15
     3fc:	08 0f       	add	r16, r24
     3fe:	08 0f       	add	r16, r24
     400:	28 28       	or	r2, r8
     402:	28 3f       	cpi	r18, 0xF8	; 248
     404:	00 28       	or	r0, r0
     406:	28 ef       	ldi	r18, 0xF8	; 248
     408:	00 ff       	sbrs	r16, 0
     40a:	00 00       	nop
     40c:	ff 00       	.word	0x00ff	; ????
     40e:	ff 28       	or	r15, r15
     410:	28 2f       	mov	r18, r24
     412:	20 3f       	cpi	r18, 0xF0	; 240
     414:	28 28       	or	r2, r8
     416:	e8 08       	sbc	r14, r8
     418:	f8 08       	sbc	r15, r8
     41a:	08 f8       	.word	0xf808	; ????
     41c:	08 f8       	.word	0xf808	; ????
     41e:	28 28       	or	r2, r8
     420:	28 f8       	.word	0xf828	; ????
     422:	00 08       	sbc	r0, r0
     424:	08 08       	sbc	r0, r8
     426:	0f 00       	.word	0x000f	; ????
     428:	00 00       	nop
     42a:	00 f8       	bld	r0, 0
     42c:	08 08       	sbc	r0, r8
     42e:	08 08       	sbc	r0, r8
     430:	f8 08       	sbc	r15, r8
     432:	08 08       	sbc	r0, r8
     434:	08 0f       	add	r16, r24
     436:	08 00       	.word	0x0008	; ????
     438:	00 00       	nop
     43a:	ff 08       	sbc	r15, r15
     43c:	08 08       	sbc	r0, r8
     43e:	08 08       	sbc	r0, r8
     440:	08 08       	sbc	r0, r8
     442:	08 08       	sbc	r0, r8
     444:	ff 08       	sbc	r15, r15
     446:	00 00       	nop
     448:	00 ff       	sbrs	r16, 0
     44a:	28 00       	.word	0x0028	; ????
     44c:	00 ff       	sbrs	r16, 0
     44e:	00 ff       	sbrs	r16, 0
     450:	00 00       	nop
     452:	f8 08       	sbc	r15, r8
     454:	e8 00       	.word	0x00e8	; ????
     456:	00 3f       	cpi	r16, 0xF0	; 240
     458:	20 2f       	mov	r18, r16
     45a:	28 28       	or	r2, r8
     45c:	e8 08       	sbc	r14, r8
     45e:	e8 28       	or	r14, r8
     460:	28 2f       	mov	r18, r24
     462:	20 2f       	mov	r18, r16
     464:	00 00       	nop
     466:	ff 00       	.word	0x00ff	; ????
     468:	ef 28       	or	r14, r15
     46a:	28 28       	or	r2, r8
     46c:	28 28       	or	r2, r8
     46e:	28 28       	or	r2, r8
     470:	ef 00       	.word	0x00ef	; ????
     472:	ef 28       	or	r14, r15
     474:	28 28       	or	r2, r8
     476:	e8 28       	or	r14, r8
     478:	08 08       	sbc	r0, r8
     47a:	f8 08       	sbc	r15, r8
     47c:	f8 28       	or	r15, r8
     47e:	28 28       	or	r2, r8
     480:	2f 28       	or	r2, r15
     482:	08 08       	sbc	r0, r8
     484:	0f 08       	sbc	r0, r15
     486:	0f 00       	.word	0x000f	; ????
     488:	00 f8       	bld	r0, 0
     48a:	08 f8       	.word	0xf808	; ????
     48c:	00 00       	nop
     48e:	00 f8       	bld	r0, 0
     490:	28 00       	.word	0x0028	; ????
     492:	00 00       	nop
     494:	3f 28       	or	r3, r15
     496:	00 00       	nop
     498:	0f 08       	sbc	r0, r15
     49a:	0f 08       	sbc	r0, r15
     49c:	08 ff       	.word	0xff08	; ????
     49e:	08 ff       	.word	0xff08	; ????
     4a0:	28 28       	or	r2, r8
     4a2:	28 ff       	.word	0xff28	; ????
     4a4:	28 08       	sbc	r2, r8
     4a6:	08 08       	sbc	r0, r8
     4a8:	f8 00       	.word	0x00f8	; ????
     4aa:	00 00       	nop
     4ac:	00 0f       	add	r16, r16
     4ae:	08 ff       	.word	0xff08	; ????
     4b0:	ff ff       	.word	0xffff	; ????
     4b2:	ff ff       	.word	0xffff	; ????
     4b4:	0f 0f       	add	r16, r31
     4b6:	0f 0f       	add	r16, r31
     4b8:	0f ff       	.word	0xff0f	; ????
     4ba:	ff ff       	.word	0xffff	; ????
     4bc:	00 00       	nop
     4be:	00 00       	nop
     4c0:	00 ff       	sbrs	r16, 0
     4c2:	ff f0       	brie	.+62     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
     4c4:	f0 f0       	brcs	.+60     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
     4c6:	f0 f0       	brcs	.+60     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
     4c8:	1c 22       	and	r1, r28
     4ca:	22 1c       	adc	r2, r2
     4cc:	22 3e       	cpi	r18, 0xE2	; 226
     4ce:	54 54       	subi	r21, 0x44	; 68
     4d0:	7c 28       	or	r7, r12
     4d2:	7e 40       	sbci	r23, 0x0E	; 14
     4d4:	40 60       	ori	r20, 0x00	; 0
     4d6:	60 40       	sbci	r22, 0x00	; 0
     4d8:	7e 40       	sbci	r23, 0x0E	; 14
     4da:	7e 40       	sbci	r23, 0x0E	; 14
     4dc:	c6 aa       	std	Z+54, r12	; 0x36
     4de:	92 82       	std	Z+2, r9	; 0x02
     4e0:	c6 1c       	adc	r12, r6
     4e2:	22 22       	and	r2, r18
     4e4:	3c 20       	and	r3, r12
     4e6:	02 7e       	andi	r16, 0xE2	; 226
     4e8:	04 78       	andi	r16, 0x84	; 132
     4ea:	04 60       	ori	r16, 0x04	; 4
     4ec:	40 7e       	andi	r20, 0xE0	; 224
     4ee:	40 40       	sbci	r20, 0x00	; 0
     4f0:	99 a5       	ldd	r25, Y+41	; 0x29
     4f2:	e7 a5       	ldd	r30, Z+47	; 0x2f
     4f4:	99 38       	cpi	r25, 0x89	; 137
     4f6:	54 92       	xch	Z, r5
     4f8:	54 38       	cpi	r21, 0x84	; 132
     4fa:	32 4e       	sbci	r19, 0xE2	; 226
     4fc:	80 4e       	sbci	r24, 0xE0	; 224
     4fe:	32 0c       	add	r3, r2
     500:	52 b2       	in	r5, 0x12	; 18
     502:	b2 0c       	add	r11, r2
     504:	0c 12       	cpse	r0, r28
     506:	1e 12       	cpse	r1, r30
     508:	0c 3d       	cpi	r16, 0xDC	; 220
     50a:	46 5a       	subi	r20, 0xA6	; 166
     50c:	62 bc       	out	0x22, r6	; 34
     50e:	7c 92       	st	X, r7
     510:	92 92       	st	-Z, r9
     512:	00 7e       	andi	r16, 0xE0	; 224
     514:	80 80       	ld	r8, Z
     516:	80 7e       	andi	r24, 0xE0	; 224
     518:	54 54       	subi	r21, 0x44	; 68
     51a:	54 54       	subi	r21, 0x44	; 68
     51c:	54 22       	and	r5, r20
     51e:	22 fa       	bst	r2, 2
     520:	22 22       	and	r2, r18
     522:	02 8a       	std	Z+18, r0	; 0x12
     524:	52 22       	and	r5, r18
     526:	02 02       	muls	r16, r18
     528:	22 52       	subi	r18, 0x22	; 34
     52a:	8a 02       	muls	r24, r26
     52c:	00 00       	nop
     52e:	ff 80       	ldd	r15, Y+7	; 0x07
     530:	c0 07       	cpc	r28, r16
     532:	01 ff       	sbrs	r16, 1
     534:	00 00       	nop
     536:	10 10       	cpse	r1, r0
     538:	d6 d6       	rcall	.+3500   	; 0x12e6 <_etext+0x1ae>
     53a:	10 6c       	ori	r17, 0xC0	; 192
     53c:	48 6c       	ori	r20, 0xC8	; 200
     53e:	24 6c       	ori	r18, 0xC4	; 196
     540:	60 f0       	brcs	.+24     	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
     542:	90 f0       	brcs	.+36     	; 0x568 <__ctors_end+0x4>
     544:	60 00       	.word	0x0060	; ????
     546:	00 18       	sub	r0, r0
     548:	18 00       	.word	0x0018	; ????
     54a:	00 00       	nop
     54c:	08 08       	sbc	r0, r8
     54e:	00 0c       	add	r0, r0
     550:	02 ff       	sbrs	r16, 2
     552:	80 80       	ld	r8, Z
     554:	00 f8       	bld	r0, 0
     556:	80 80       	ld	r8, Z
     558:	78 00       	.word	0x0078	; ????
     55a:	98 b8       	out	0x08, r9	; 8
     55c:	e8 48       	sbci	r30, 0x88	; 136
     55e:	00 3c       	cpi	r16, 0xC0	; 192
     560:	3c 3c       	cpi	r19, 0xCC	; 204
     562:	3c 00       	.word	0x003c	; ????

00000564 <__ctors_end>:
     564:	11 24       	eor	r1, r1
     566:	1f be       	out	0x3f, r1	; 63
     568:	cf ef       	ldi	r28, 0xFF	; 255
     56a:	d8 e0       	ldi	r29, 0x08	; 8
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	cd bf       	out	0x3d, r28	; 61

00000570 <__do_copy_data>:
     570:	15 e0       	ldi	r17, 0x05	; 5
     572:	a0 e0       	ldi	r26, 0x00	; 0
     574:	b1 e0       	ldi	r27, 0x01	; 1
     576:	e8 e3       	ldi	r30, 0x38	; 56
     578:	f1 e1       	ldi	r31, 0x11	; 17
     57a:	02 c0       	rjmp	.+4      	; 0x580 <__do_copy_data+0x10>
     57c:	05 90       	lpm	r0, Z+
     57e:	0d 92       	st	X+, r0
     580:	a8 31       	cpi	r26, 0x18	; 24
     582:	b1 07       	cpc	r27, r17
     584:	d9 f7       	brne	.-10     	; 0x57c <__do_copy_data+0xc>

00000586 <__do_clear_bss>:
     586:	25 e0       	ldi	r18, 0x05	; 5
     588:	a8 e1       	ldi	r26, 0x18	; 24
     58a:	b5 e0       	ldi	r27, 0x05	; 5
     58c:	01 c0       	rjmp	.+2      	; 0x590 <.do_clear_bss_start>

0000058e <.do_clear_bss_loop>:
     58e:	1d 92       	st	X+, r1

00000590 <.do_clear_bss_start>:
     590:	a8 31       	cpi	r26, 0x18	; 24
     592:	b2 07       	cpc	r27, r18
     594:	e1 f7       	brne	.-8      	; 0x58e <.do_clear_bss_loop>
     596:	0e 94 75 06 	call	0xcea	; 0xcea <main>
     59a:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <_exit>

0000059e <__bad_interrupt>:
     59e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005a2 <lcd_command>:
			lcd_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			lcd_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
			lcd_data(0x0);
		}
	}
}
     5a2:	5c 98       	cbi	0x0b, 4	; 11
     5a4:	27 e0       	ldi	r18, 0x07	; 7
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	5d 98       	cbi	0x0b, 5	; 11
     5ac:	ac 01       	movw	r20, r24
     5ae:	02 2e       	mov	r0, r18
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <lcd_command+0x14>
     5b2:	55 95       	asr	r21
     5b4:	47 95       	ror	r20
     5b6:	0a 94       	dec	r0
     5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <lcd_command+0x10>
     5ba:	40 ff       	sbrs	r20, 0
     5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <lcd_command+0x20>
     5be:	5e 9a       	sbi	0x0b, 6	; 11
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <lcd_command+0x22>
     5c2:	5e 98       	cbi	0x0b, 6	; 11
     5c4:	5d 9a       	sbi	0x0b, 5	; 11
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	31 09       	sbc	r19, r1
     5ca:	78 f7       	brcc	.-34     	; 0x5aa <lcd_command+0x8>
     5cc:	08 95       	ret

000005ce <lcd_init>:
     5ce:	56 9a       	sbi	0x0a, 6	; 10
     5d0:	55 9a       	sbi	0x0a, 5	; 10
     5d2:	54 9a       	sbi	0x0a, 4	; 10
     5d4:	53 9a       	sbi	0x0a, 3	; 10
     5d6:	52 9a       	sbi	0x0a, 2	; 10
     5d8:	5a 98       	cbi	0x0b, 2	; 11
     5da:	5b 98       	cbi	0x0b, 3	; 11
     5dc:	2f e9       	ldi	r18, 0x9F	; 159
     5de:	86 e8       	ldi	r24, 0x86	; 134
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	21 50       	subi	r18, 0x01	; 1
     5e4:	80 40       	sbci	r24, 0x00	; 0
     5e6:	90 40       	sbci	r25, 0x00	; 0
     5e8:	e1 f7       	brne	.-8      	; 0x5e2 <lcd_init+0x14>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <lcd_init+0x1e>
     5ec:	00 00       	nop
     5ee:	5b 9a       	sbi	0x0b, 3	; 11
     5f0:	83 ea       	ldi	r24, 0xA3	; 163
     5f2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     5f6:	80 ea       	ldi	r24, 0xA0	; 160
     5f8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     5fc:	80 ec       	ldi	r24, 0xC0	; 192
     5fe:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     602:	80 e4       	ldi	r24, 0x40	; 64
     604:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     608:	8c e2       	ldi	r24, 0x2C	; 44
     60a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     60e:	83 ed       	ldi	r24, 0xD3	; 211
     610:	90 e3       	ldi	r25, 0x30	; 48
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <lcd_init+0x44>
     616:	00 c0       	rjmp	.+0      	; 0x618 <lcd_init+0x4a>
     618:	00 00       	nop
     61a:	8e e2       	ldi	r24, 0x2E	; 46
     61c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     620:	83 ed       	ldi	r24, 0xD3	; 211
     622:	90 e3       	ldi	r25, 0x30	; 48
     624:	01 97       	sbiw	r24, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <lcd_init+0x56>
     628:	00 c0       	rjmp	.+0      	; 0x62a <lcd_init+0x5c>
     62a:	00 00       	nop
     62c:	8f e2       	ldi	r24, 0x2F	; 47
     62e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     632:	83 ec       	ldi	r24, 0xC3	; 195
     634:	99 e0       	ldi	r25, 0x09	; 9
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <lcd_init+0x68>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <lcd_init+0x6e>
     63c:	00 00       	nop
     63e:	86 e2       	ldi	r24, 0x26	; 38
     640:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     644:	08 95       	ret

00000646 <lcd_data>:
     646:	5c 9a       	sbi	0x0b, 4	; 11
     648:	27 e0       	ldi	r18, 0x07	; 7
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	5d 98       	cbi	0x0b, 5	; 11
     650:	ac 01       	movw	r20, r24
     652:	02 2e       	mov	r0, r18
     654:	02 c0       	rjmp	.+4      	; 0x65a <lcd_data+0x14>
     656:	55 95       	asr	r21
     658:	47 95       	ror	r20
     65a:	0a 94       	dec	r0
     65c:	e2 f7       	brpl	.-8      	; 0x656 <lcd_data+0x10>
     65e:	40 ff       	sbrs	r20, 0
     660:	02 c0       	rjmp	.+4      	; 0x666 <lcd_data+0x20>
     662:	5e 9a       	sbi	0x0b, 6	; 11
     664:	01 c0       	rjmp	.+2      	; 0x668 <lcd_data+0x22>
     666:	5e 98       	cbi	0x0b, 6	; 11
     668:	5d 9a       	sbi	0x0b, 5	; 11
     66a:	21 50       	subi	r18, 0x01	; 1
     66c:	31 09       	sbc	r19, r1
     66e:	78 f7       	brcc	.-34     	; 0x64e <lcd_data+0x8>
     670:	08 95       	ret

00000672 <lcd_set_brightness>:
void lcd_data(uint8_t c) {
	A0_PORT |= _BV(A0);

	spiwrite(c);
}
void lcd_set_brightness(uint8_t val) {
     672:	cf 93       	push	r28
     674:	c8 2f       	mov	r28, r24
	lcd_command(CMD_SET_VOLUME_FIRST);
     676:	81 e8       	ldi	r24, 0x81	; 129
     678:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
	lcd_command(CMD_SET_VOLUME_SECOND | (val & 0x3f));
     67c:	8c 2f       	mov	r24, r28
     67e:	8f 73       	andi	r24, 0x3F	; 63
     680:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
}
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <write_buffer>:

//write to the lcd buffer
void write_buffer(uint8_t *buff) {
     688:	cf 92       	push	r12
     68a:	df 92       	push	r13
     68c:	ef 92       	push	r14
     68e:	ff 92       	push	r15
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	0f 2e       	mov	r0, r31
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	ef 2e       	mov	r14, r31
     69e:	f5 e0       	ldi	r31, 0x05	; 5
     6a0:	ff 2e       	mov	r15, r31
     6a2:	f0 2d       	mov	r31, r0
     6a4:	ec 01       	movw	r28, r24
     6a6:	0f 2e       	mov	r0, r31
     6a8:	f0 e1       	ldi	r31, 0x10	; 16
     6aa:	cf 2e       	mov	r12, r31
     6ac:	f5 e0       	ldi	r31, 0x05	; 5
     6ae:	df 2e       	mov	r13, r31
     6b0:	f0 2d       	mov	r31, r0
	uint8_t c, p;

	for(p = 0; p < 8; p++) {
		
		lcd_command(CMD_SET_PAGE | pagemap[p]);
     6b2:	f7 01       	movw	r30, r14
     6b4:	80 81       	ld	r24, Z
     6b6:	f2 e0       	ldi	r31, 0x02	; 2
     6b8:	ef 0e       	add	r14, r31
     6ba:	f1 1c       	adc	r15, r1
     6bc:	80 6b       	ori	r24, 0xB0	; 176
     6be:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
		lcd_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
		lcd_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
     6c8:	80 e1       	ldi	r24, 0x10	; 16
     6ca:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
		lcd_command(CMD_RMW);
     6ce:	80 ee       	ldi	r24, 0xE0	; 224
     6d0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
		lcd_data(0xff);
     6d4:	8f ef       	ldi	r24, 0xFF	; 255
     6d6:	0e 94 23 03 	call	0x646	; 0x646 <lcd_data>
     6da:	8e 01       	movw	r16, r28
     6dc:	00 58       	subi	r16, 0x80	; 128
     6de:	1f 4f       	sbci	r17, 0xFF	; 255
		
		
		for(c = 0; c < 128; c++) {
			lcd_data(buff[(128*p)+c]);
     6e0:	89 91       	ld	r24, Y+
     6e2:	0e 94 23 03 	call	0x646	; 0x646 <lcd_data>
		lcd_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
		lcd_command(CMD_RMW);
		lcd_data(0xff);
		
		
		for(c = 0; c < 128; c++) {
     6e6:	c0 17       	cp	r28, r16
     6e8:	d1 07       	cpc	r29, r17
     6ea:	d1 f7       	brne	.-12     	; 0x6e0 <write_buffer+0x58>
     6ec:	e8 01       	movw	r28, r16

//write to the lcd buffer
void write_buffer(uint8_t *buff) {
	uint8_t c, p;

	for(p = 0; p < 8; p++) {
     6ee:	ce 14       	cp	r12, r14
     6f0:	df 04       	cpc	r13, r15
     6f2:	f9 f6       	brne	.-66     	; 0x6b2 <write_buffer+0x2a>
		
		for(c = 0; c < 128; c++) {
			lcd_data(buff[(128*p)+c]);
		}
	}
}
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	df 90       	pop	r13
     702:	cf 90       	pop	r12
     704:	08 95       	ret

00000706 <clear_buffer>:

// function to clear everything in the buffer
void clear_buffer(uint8_t *buff) {
	memset(buff, 0, 1024);
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	34 e0       	ldi	r19, 0x04	; 4
     70a:	fc 01       	movw	r30, r24
     70c:	a9 01       	movw	r20, r18
     70e:	11 92       	st	Z+, r1
     710:	41 50       	subi	r20, 0x01	; 1
     712:	50 40       	sbci	r21, 0x00	; 0
     714:	e1 f7       	brne	.-8      	; 0x70e <clear_buffer+0x8>
     716:	08 95       	ret

00000718 <drawchar>:
//*********Write the functions mentioned below ********//

//**********an example to get started************//

// this function writes a character on the lcd at a coordinate
void drawchar(uint8_t *buff, uint8_t x, uint8_t line, uint8_t c) {
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	f9 01       	movw	r30, r18
     71c:	ee 0f       	add	r30, r30
     71e:	ff 1f       	adc	r31, r31
     720:	ee 0f       	add	r30, r30
     722:	ff 1f       	adc	r31, r31
     724:	e2 0f       	add	r30, r18
     726:	f3 1f       	adc	r31, r19
     728:	e8 59       	subi	r30, 0x98	; 152
     72a:	ff 4f       	sbci	r31, 0xFF	; 255
     72c:	55 e0       	ldi	r21, 0x05	; 5
     72e:	56 0f       	add	r21, r22
	for (uint8_t i =0; i<5; i++ ) {
		buff[x + (line*128) ] = pgm_read_byte(font+(c*5)+i);
     730:	9c 01       	movw	r18, r24
     732:	70 e8       	ldi	r23, 0x80	; 128
     734:	47 9f       	mul	r20, r23
     736:	20 0d       	add	r18, r0
     738:	31 1d       	adc	r19, r1
     73a:	11 24       	eor	r1, r1
     73c:	94 91       	lpm	r25, Z
     73e:	d9 01       	movw	r26, r18
     740:	a6 0f       	add	r26, r22
     742:	b1 1d       	adc	r27, r1
     744:	9c 93       	st	X, r25
		x++;
     746:	6f 5f       	subi	r22, 0xFF	; 255
     748:	31 96       	adiw	r30, 0x01	; 1

//**********an example to get started************//

// this function writes a character on the lcd at a coordinate
void drawchar(uint8_t *buff, uint8_t x, uint8_t line, uint8_t c) {
	for (uint8_t i =0; i<5; i++ ) {
     74a:	65 13       	cpse	r22, r21
     74c:	f7 cf       	rjmp	.-18     	; 0x73c <drawchar+0x24>
		buff[x + (line*128) ] = pgm_read_byte(font+(c*5)+i);
		x++;
	}
}
     74e:	08 95       	ret

00000750 <clearpixel>:
	}
}

// function to clear a single pixel
void clearpixel(uint8_t *buff, uint8_t x, uint8_t y) {
	buff[x + (y/8*128) - 1] &= ~(1 << (7-(y % 8)));
     750:	24 2f       	mov	r18, r20
     752:	26 95       	lsr	r18
     754:	26 95       	lsr	r18
     756:	26 95       	lsr	r18
     758:	e6 2f       	mov	r30, r22
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	30 e8       	ldi	r19, 0x80	; 128
     75e:	23 9f       	mul	r18, r19
     760:	e0 0d       	add	r30, r0
     762:	f1 1d       	adc	r31, r1
     764:	11 24       	eor	r1, r1
     766:	31 97       	sbiw	r30, 0x01	; 1
     768:	e8 0f       	add	r30, r24
     76a:	f9 1f       	adc	r31, r25
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	40 95       	com	r20
     770:	50 95       	com	r21
     772:	47 70       	andi	r20, 0x07	; 7
     774:	55 27       	eor	r21, r21
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	02 c0       	rjmp	.+4      	; 0x780 <clearpixel+0x30>
     77c:	88 0f       	add	r24, r24
     77e:	99 1f       	adc	r25, r25
     780:	4a 95       	dec	r20
     782:	e2 f7       	brpl	.-8      	; 0x77c <clearpixel+0x2c>
     784:	80 95       	com	r24
     786:	90 81       	ld	r25, Z
     788:	89 23       	and	r24, r25
     78a:	80 83       	st	Z, r24
     78c:	08 95       	ret

0000078e <setpixel>:
//*******************//


// the most basic function, set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) {
	if (color == 0) {
     78e:	21 11       	cpse	r18, r1
     790:	03 c0       	rjmp	.+6      	; 0x798 <setpixel+0xa>
		clearpixel(buff, x, y);
     792:	0e 94 a8 03 	call	0x750	; 0x750 <clearpixel>
     796:	08 95       	ret
		} else {
		buff[x + (y/8*128) - 1] |= (1 << (7-(y % 8)));
     798:	24 2f       	mov	r18, r20
     79a:	26 95       	lsr	r18
     79c:	26 95       	lsr	r18
     79e:	26 95       	lsr	r18
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	30 e8       	ldi	r19, 0x80	; 128
     7a4:	23 9f       	mul	r18, r19
     7a6:	60 0d       	add	r22, r0
     7a8:	71 1d       	adc	r23, r1
     7aa:	11 24       	eor	r1, r1
     7ac:	61 50       	subi	r22, 0x01	; 1
     7ae:	71 09       	sbc	r23, r1
     7b0:	fc 01       	movw	r30, r24
     7b2:	e6 0f       	add	r30, r22
     7b4:	f7 1f       	adc	r31, r23
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	40 95       	com	r20
     7ba:	50 95       	com	r21
     7bc:	47 70       	andi	r20, 0x07	; 7
     7be:	55 27       	eor	r21, r21
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <setpixel+0x3c>
     7c6:	88 0f       	add	r24, r24
     7c8:	99 1f       	adc	r25, r25
     7ca:	4a 95       	dec	r20
     7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <setpixel+0x38>
     7ce:	90 81       	ld	r25, Z
     7d0:	89 2b       	or	r24, r25
     7d2:	80 83       	st	Z, r24
     7d4:	08 95       	ret

000007d6 <drawstring>:
void clearpixel(uint8_t *buff, uint8_t x, uint8_t y) {
	buff[x + (y/8*128) - 1] &= ~(1 << (7-(y % 8)));
}

// function to write a string on the lcd
void drawstring(uint8_t *buff, uint8_t x, uint8_t line, uint8_t *c) {
     7d6:	ef 92       	push	r14
     7d8:	ff 92       	push	r15
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	f9 01       	movw	r30, r18
	int i = 0;
	while (*c != '\0') {
     7e4:	20 81       	ld	r18, Z
     7e6:	22 23       	and	r18, r18
     7e8:	89 f0       	breq	.+34     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     7ea:	8f 01       	movw	r16, r30
     7ec:	d4 2f       	mov	r29, r20
     7ee:	7c 01       	movw	r14, r24
     7f0:	0f 5f       	subi	r16, 0xFF	; 255
     7f2:	1f 4f       	sbci	r17, 0xFF	; 255
     7f4:	c6 2f       	mov	r28, r22
		drawchar(buff, x + i*6, line, *c);
     7f6:	4d 2f       	mov	r20, r29
     7f8:	6c 2f       	mov	r22, r28
     7fa:	c7 01       	movw	r24, r14
     7fc:	0e 94 8c 03 	call	0x718	; 0x718 <drawchar>
}

// function to write a string on the lcd
void drawstring(uint8_t *buff, uint8_t x, uint8_t line, uint8_t *c) {
	int i = 0;
	while (*c != '\0') {
     800:	f8 01       	movw	r30, r16
     802:	21 91       	ld	r18, Z+
     804:	8f 01       	movw	r16, r30
     806:	ca 5f       	subi	r28, 0xFA	; 250
     808:	21 11       	cpse	r18, r1
     80a:	f5 cf       	rjmp	.-22     	; 0x7f6 <drawstring+0x20>
		drawchar(buff, x + i*6, line, *c);
		c++;
		i++;
	}
}
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	08 95       	ret

0000081a <drawline>:

// use bresenham's algorithm to write this function to draw a line
void drawline(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,uint8_t color) {
     81a:	4f 92       	push	r4
     81c:	5f 92       	push	r5
     81e:	6f 92       	push	r6
     820:	7f 92       	push	r7
     822:	8f 92       	push	r8
     824:	9f 92       	push	r9
     826:	af 92       	push	r10
     828:	bf 92       	push	r11
     82a:	cf 92       	push	r12
     82c:	df 92       	push	r13
     82e:	ef 92       	push	r14
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	6c 01       	movw	r12, r24
     83a:	d6 2f       	mov	r29, r22
     83c:	c4 2f       	mov	r28, r20
     83e:	12 2f       	mov	r17, r18
	double dx = x1 - x0 + 0.0;
     840:	62 2f       	mov	r22, r18
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	6d 1b       	sub	r22, r29
     846:	71 09       	sbc	r23, r1
     848:	07 2e       	mov	r0, r23
     84a:	00 0c       	add	r0, r0
     84c:	88 0b       	sbc	r24, r24
     84e:	99 0b       	sbc	r25, r25
     850:	0e 94 e5 07 	call	0xfca	; 0xfca <__floatsisf>
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	a9 01       	movw	r20, r18
     85a:	0e 94 00 07 	call	0xe00	; 0xe00 <__addsf3>
     85e:	4b 01       	movw	r8, r22
     860:	5c 01       	movw	r10, r24
	double dy = y1 - y0 + 0.0;
	double derr = fabs((double)dy/(double)dx);
	double err = 0.0;
	if (dx == 0) {
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	a9 01       	movw	r20, r18
     868:	0e 94 6c 07 	call	0xed8	; 0xed8 <__cmpsf2>
     86c:	81 11       	cpse	r24, r1
     86e:	0d c0       	rjmp	.+26     	; 0x88a <drawline+0x70>
		uint8_t x = x0;
		for (uint8_t y = y0; y <= y1; y++) {
     870:	0c 17       	cp	r16, r28
     872:	08 f4       	brcc	.+2      	; 0x876 <drawline+0x5c>
     874:	6e c0       	rjmp	.+220    	; 0x952 <__stack+0x53>
			setpixel(buff, x, y, color);
     876:	2e 2d       	mov	r18, r14
     878:	4c 2f       	mov	r20, r28
     87a:	6d 2f       	mov	r22, r29
     87c:	c6 01       	movw	r24, r12
     87e:	0e 94 c7 03 	call	0x78e	; 0x78e <setpixel>
	double dy = y1 - y0 + 0.0;
	double derr = fabs((double)dy/(double)dx);
	double err = 0.0;
	if (dx == 0) {
		uint8_t x = x0;
		for (uint8_t y = y0; y <= y1; y++) {
     882:	cf 5f       	subi	r28, 0xFF	; 255
     884:	0c 17       	cp	r16, r28
     886:	b8 f7       	brcc	.-18     	; 0x876 <drawline+0x5c>
     888:	64 c0       	rjmp	.+200    	; 0x952 <__stack+0x53>
}

// use bresenham's algorithm to write this function to draw a line
void drawline(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,uint8_t color) {
	double dx = x1 - x0 + 0.0;
	double dy = y1 - y0 + 0.0;
     88a:	60 2f       	mov	r22, r16
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	6c 1b       	sub	r22, r28
     890:	71 09       	sbc	r23, r1
     892:	07 2e       	mov	r0, r23
     894:	00 0c       	add	r0, r0
     896:	88 0b       	sbc	r24, r24
     898:	99 0b       	sbc	r25, r25
     89a:	0e 94 e5 07 	call	0xfca	; 0xfca <__floatsisf>
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	a9 01       	movw	r20, r18
     8a4:	0e 94 00 07 	call	0xe00	; 0xe00 <__addsf3>
     8a8:	2b 01       	movw	r4, r22
     8aa:	3c 01       	movw	r6, r24
	if (dx == 0) {
		uint8_t x = x0;
		for (uint8_t y = y0; y <= y1; y++) {
			setpixel(buff, x, y, color);
		}
	} else if (dy == 0) {
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	a9 01       	movw	r20, r18
     8b2:	0e 94 6c 07 	call	0xed8	; 0xed8 <__cmpsf2>
     8b6:	88 23       	and	r24, r24
     8b8:	19 f0       	breq	.+6      	; 0x8c0 <drawline+0xa6>
		for (uint8_t x = x0; x <= x1; x++) {
			setpixel(buff, x, y, color);
		}
	} else {
		uint8_t y = y0;
		for(uint8_t x = x0; x <= x1; x++) {
     8ba:	1d 17       	cp	r17, r29
     8bc:	70 f4       	brcc	.+28     	; 0x8da <drawline+0xc0>
     8be:	49 c0       	rjmp	.+146    	; 0x952 <__stack+0x53>
		for (uint8_t y = y0; y <= y1; y++) {
			setpixel(buff, x, y, color);
		}
	} else if (dy == 0) {
		uint8_t y = y0;
		for (uint8_t x = x0; x <= x1; x++) {
     8c0:	1d 17       	cp	r17, r29
     8c2:	08 f4       	brcc	.+2      	; 0x8c6 <drawline+0xac>
     8c4:	46 c0       	rjmp	.+140    	; 0x952 <__stack+0x53>
			setpixel(buff, x, y, color);
     8c6:	2e 2d       	mov	r18, r14
     8c8:	4c 2f       	mov	r20, r28
     8ca:	6d 2f       	mov	r22, r29
     8cc:	c6 01       	movw	r24, r12
     8ce:	0e 94 c7 03 	call	0x78e	; 0x78e <setpixel>
		for (uint8_t y = y0; y <= y1; y++) {
			setpixel(buff, x, y, color);
		}
	} else if (dy == 0) {
		uint8_t y = y0;
		for (uint8_t x = x0; x <= x1; x++) {
     8d2:	df 5f       	subi	r29, 0xFF	; 255
     8d4:	1d 17       	cp	r17, r29
     8d6:	b8 f7       	brcc	.-18     	; 0x8c6 <drawline+0xac>
     8d8:	3c c0       	rjmp	.+120    	; 0x952 <__stack+0x53>

// use bresenham's algorithm to write this function to draw a line
void drawline(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,uint8_t color) {
	double dx = x1 - x0 + 0.0;
	double dy = y1 - y0 + 0.0;
	double derr = fabs((double)dy/(double)dx);
     8da:	a5 01       	movw	r20, r10
     8dc:	94 01       	movw	r18, r8
     8de:	c3 01       	movw	r24, r6
     8e0:	b2 01       	movw	r22, r4
     8e2:	0e 94 71 07 	call	0xee2	; 0xee2 <__divsf3>
     8e6:	2b 01       	movw	r4, r22
     8e8:	3c 01       	movw	r6, r24
     8ea:	e8 94       	clt
     8ec:	77 f8       	bld	r7, 7
     8ee:	81 2c       	mov	r8, r1
     8f0:	91 2c       	mov	r9, r1
     8f2:	54 01       	movw	r10, r8
			setpixel(buff, x, y, color);
		}
	} else {
		uint8_t y = y0;
		for(uint8_t x = x0; x <= x1; x++) {
			setpixel(buff, x, y, color);
     8f4:	2e 2d       	mov	r18, r14
     8f6:	4c 2f       	mov	r20, r28
     8f8:	6d 2f       	mov	r22, r29
     8fa:	c6 01       	movw	r24, r12
     8fc:	0e 94 c7 03 	call	0x78e	; 0x78e <setpixel>
			err += derr;
     900:	a3 01       	movw	r20, r6
     902:	92 01       	movw	r18, r4
     904:	c5 01       	movw	r24, r10
     906:	b4 01       	movw	r22, r8
     908:	0e 94 00 07 	call	0xe00	; 0xe00 <__addsf3>
     90c:	4b 01       	movw	r8, r22
     90e:	5c 01       	movw	r10, r24
			if (err >= 0.5) {
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	5f e3       	ldi	r21, 0x3F	; 63
     918:	0e 94 95 08 	call	0x112a	; 0x112a <__gesf2>
     91c:	88 23       	and	r24, r24
     91e:	b4 f0       	brlt	.+44     	; 0x94c <__stack+0x4d>
				if (derr > 0) {
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	a9 01       	movw	r20, r18
     926:	c3 01       	movw	r24, r6
     928:	b2 01       	movw	r22, r4
     92a:	0e 94 95 08 	call	0x112a	; 0x112a <__gesf2>
     92e:	18 16       	cp	r1, r24
     930:	14 f4       	brge	.+4      	; 0x936 <__stack+0x37>
					y++;
     932:	cf 5f       	subi	r28, 0xFF	; 255
     934:	01 c0       	rjmp	.+2      	; 0x938 <__stack+0x39>
					} else {
					y--;
     936:	c1 50       	subi	r28, 0x01	; 1
				}
				err -= 1.0;
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	40 e8       	ldi	r20, 0x80	; 128
     93e:	5f e3       	ldi	r21, 0x3F	; 63
     940:	c5 01       	movw	r24, r10
     942:	b4 01       	movw	r22, r8
     944:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__subsf3>
     948:	4b 01       	movw	r8, r22
     94a:	5c 01       	movw	r10, r24
		for (uint8_t x = x0; x <= x1; x++) {
			setpixel(buff, x, y, color);
		}
	} else {
		uint8_t y = y0;
		for(uint8_t x = x0; x <= x1; x++) {
     94c:	df 5f       	subi	r29, 0xFF	; 255
     94e:	1d 17       	cp	r17, r29
     950:	88 f6       	brcc	.-94     	; 0x8f4 <drawline+0xda>
				}
				err -= 1.0;
			}
		}
	}
}
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	ef 90       	pop	r14
     95c:	df 90       	pop	r13
     95e:	cf 90       	pop	r12
     960:	bf 90       	pop	r11
     962:	af 90       	pop	r10
     964:	9f 90       	pop	r9
     966:	8f 90       	pop	r8
     968:	7f 90       	pop	r7
     96a:	6f 90       	pop	r6
     96c:	5f 90       	pop	r5
     96e:	4f 90       	pop	r4
     970:	08 95       	ret

00000972 <fillrect>:

// function to draw a filled rectangle
void fillrect(uint8_t *buff,uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
     972:	af 92       	push	r10
     974:	bf 92       	push	r11
     976:	cf 92       	push	r12
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	5c 01       	movw	r10, r24
     988:	c6 2f       	mov	r28, r22
     98a:	14 2f       	mov	r17, r20
     98c:	fe 2c       	mov	r15, r14
	for (uint8_t i = x; i < x+w; i++) {
     98e:	86 2f       	mov	r24, r22
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	6c 01       	movw	r12, r24
     994:	c2 0e       	add	r12, r18
     996:	d1 1c       	adc	r13, r1
     998:	8c 15       	cp	r24, r12
     99a:	9d 05       	cpc	r25, r13
     99c:	84 f4       	brge	.+32     	; 0x9be <fillrect+0x4c>
		drawline(buff, i, y, i, y+h, color);
     99e:	d4 2f       	mov	r29, r20
     9a0:	d0 0f       	add	r29, r16
     9a2:	ef 2c       	mov	r14, r15
     9a4:	0d 2f       	mov	r16, r29
     9a6:	2c 2f       	mov	r18, r28
     9a8:	41 2f       	mov	r20, r17
     9aa:	6c 2f       	mov	r22, r28
     9ac:	c5 01       	movw	r24, r10
     9ae:	0e 94 0d 04 	call	0x81a	; 0x81a <drawline>
	}
}

// function to draw a filled rectangle
void fillrect(uint8_t *buff,uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	for (uint8_t i = x; i < x+w; i++) {
     9b2:	cf 5f       	subi	r28, 0xFF	; 255
     9b4:	8c 2f       	mov	r24, r28
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	8c 15       	cp	r24, r12
     9ba:	9d 05       	cpc	r25, r13
     9bc:	94 f3       	brlt	.-28     	; 0x9a2 <fillrect+0x30>
		drawline(buff, i, y, i, y+h, color);
	}
}
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	df 90       	pop	r13
     9cc:	cf 90       	pop	r12
     9ce:	bf 90       	pop	r11
     9d0:	af 90       	pop	r10
     9d2:	08 95       	ret

000009d4 <drawrect>:


// function to draw a rectangle
void drawrect(uint8_t *buff,uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
     9d4:	bf 92       	push	r11
     9d6:	cf 92       	push	r12
     9d8:	df 92       	push	r13
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	6c 01       	movw	r12, r24
     9e8:	f6 2e       	mov	r15, r22
     9ea:	14 2f       	mov	r17, r20
     9ec:	c0 2f       	mov	r28, r16
	drawline(buff, x, y, x+w, y, color); // top line
     9ee:	d6 2f       	mov	r29, r22
     9f0:	d2 0f       	add	r29, r18
     9f2:	04 2f       	mov	r16, r20
     9f4:	2d 2f       	mov	r18, r29
     9f6:	0e 94 0d 04 	call	0x81a	; 0x81a <drawline>
	drawline(buff, x+w, y + 1, x+w, y+h, color); // right line
     9fa:	c1 0f       	add	r28, r17
     9fc:	1f 5f       	subi	r17, 0xFF	; 255
     9fe:	0c 2f       	mov	r16, r28
     a00:	2d 2f       	mov	r18, r29
     a02:	41 2f       	mov	r20, r17
     a04:	6d 2f       	mov	r22, r29
     a06:	c6 01       	movw	r24, r12
     a08:	0e 94 0d 04 	call	0x81a	; 0x81a <drawline>
	drawline(buff, x, y+h, x+w-1, y+h, color); // bottom line
     a0c:	2f ef       	ldi	r18, 0xFF	; 255
     a0e:	2d 0f       	add	r18, r29
     a10:	4c 2f       	mov	r20, r28
     a12:	6f 2d       	mov	r22, r15
     a14:	c6 01       	movw	r24, r12
     a16:	0e 94 0d 04 	call	0x81a	; 0x81a <drawline>
	drawline(buff, x, y+1, x, y+h-1, color);
     a1a:	0f ef       	ldi	r16, 0xFF	; 255
     a1c:	0c 0f       	add	r16, r28
     a1e:	2f 2d       	mov	r18, r15
     a20:	41 2f       	mov	r20, r17
     a22:	6f 2d       	mov	r22, r15
     a24:	c6 01       	movw	r24, r12
     a26:	0e 94 0d 04 	call	0x81a	; 0x81a <drawline>
}
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	ff 90       	pop	r15
     a34:	ef 90       	pop	r14
     a36:	df 90       	pop	r13
     a38:	cf 90       	pop	r12
     a3a:	bf 90       	pop	r11
     a3c:	08 95       	ret

00000a3e <dC>:


void dC(uint8_t *buff, uint8_t x0, uint8_t y0, int x, int y, uint8_t color) {
     a3e:	af 92       	push	r10
     a40:	bf 92       	push	r11
     a42:	cf 92       	push	r12
     a44:	df 92       	push	r13
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	ec 01       	movw	r28, r24
     a54:	16 2f       	mov	r17, r22
     a56:	f4 2e       	mov	r15, r20
     a58:	d2 2e       	mov	r13, r18
	setpixel(buff, x0+x, y0+y, color);
     a5a:	b0 2e       	mov	r11, r16
     a5c:	b4 0e       	add	r11, r20
     a5e:	a2 2e       	mov	r10, r18
     a60:	a6 0e       	add	r10, r22
     a62:	2e 2d       	mov	r18, r14
     a64:	4b 2d       	mov	r20, r11
     a66:	6a 2d       	mov	r22, r10
     a68:	0e 94 c7 03 	call	0x78e	; 0x78e <setpixel>
	setpixel(buff, x0-x, y0+y, color);
     a6c:	c1 2e       	mov	r12, r17
     a6e:	cd 18       	sub	r12, r13
     a70:	2e 2d       	mov	r18, r14
     a72:	4b 2d       	mov	r20, r11
     a74:	6c 2d       	mov	r22, r12
     a76:	ce 01       	movw	r24, r28
     a78:	0e 94 c7 03 	call	0x78e	; 0x78e <setpixel>
	setpixel(buff, x0+x, y0-y, color);
     a7c:	bf 2c       	mov	r11, r15
     a7e:	b0 1a       	sub	r11, r16
     a80:	2e 2d       	mov	r18, r14
     a82:	4b 2d       	mov	r20, r11
     a84:	6a 2d       	mov	r22, r10
     a86:	ce 01       	movw	r24, r28
     a88:	0e 94 c7 03 	call	0x78e	; 0x78e <setpixel>
	setpixel(buff, x0-x, y0-y, color);
     a8c:	2e 2d       	mov	r18, r14
     a8e:	4b 2d       	mov	r20, r11
     a90:	6c 2d       	mov	r22, r12
     a92:	ce 01       	movw	r24, r28
     a94:	0e 94 c7 03 	call	0x78e	; 0x78e <setpixel>
	setpixel(buff, x0+y, y0+x, color);
     a98:	bf 2c       	mov	r11, r15
     a9a:	bd 0c       	add	r11, r13
     a9c:	c0 2e       	mov	r12, r16
     a9e:	c1 0e       	add	r12, r17
     aa0:	2e 2d       	mov	r18, r14
     aa2:	4b 2d       	mov	r20, r11
     aa4:	6c 2d       	mov	r22, r12
     aa6:	ce 01       	movw	r24, r28
     aa8:	0e 94 c7 03 	call	0x78e	; 0x78e <setpixel>
	setpixel(buff, x0-y, y0+x, color);
     aac:	10 1b       	sub	r17, r16
     aae:	2e 2d       	mov	r18, r14
     ab0:	4b 2d       	mov	r20, r11
     ab2:	61 2f       	mov	r22, r17
     ab4:	ce 01       	movw	r24, r28
     ab6:	0e 94 c7 03 	call	0x78e	; 0x78e <setpixel>
	setpixel(buff, x0+y, y0-x, color);
     aba:	fd 18       	sub	r15, r13
     abc:	2e 2d       	mov	r18, r14
     abe:	4f 2d       	mov	r20, r15
     ac0:	6c 2d       	mov	r22, r12
     ac2:	ce 01       	movw	r24, r28
     ac4:	0e 94 c7 03 	call	0x78e	; 0x78e <setpixel>
	setpixel(buff, x0-y, y0-x, color);
     ac8:	2e 2d       	mov	r18, r14
     aca:	4f 2d       	mov	r20, r15
     acc:	61 2f       	mov	r22, r17
     ace:	ce 01       	movw	r24, r28
     ad0:	0e 94 c7 03 	call	0x78e	; 0x78e <setpixel>
}
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	df 90       	pop	r13
     ae2:	cf 90       	pop	r12
     ae4:	bf 90       	pop	r11
     ae6:	af 90       	pop	r10
     ae8:	08 95       	ret

00000aea <drawcircle>:

// function to draw a circle
void drawcircle(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t r,uint8_t color) {
     aea:	4f 92       	push	r4
     aec:	5f 92       	push	r5
     aee:	6f 92       	push	r6
     af0:	7f 92       	push	r7
     af2:	8f 92       	push	r8
     af4:	9f 92       	push	r9
     af6:	af 92       	push	r10
     af8:	bf 92       	push	r11
     afa:	cf 92       	push	r12
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	4c 01       	movw	r8, r24
     b0c:	f6 2e       	mov	r15, r22
     b0e:	54 2e       	mov	r5, r20
     b10:	40 2e       	mov	r4, r16
	int x = 0;
	int y = r;
     b12:	c2 2e       	mov	r12, r18
     b14:	d1 2c       	mov	r13, r1
	dC(buff, x0, y0, x, y, color);
     b16:	e0 2e       	mov	r14, r16
     b18:	86 01       	movw	r16, r12
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <dC>
	int d = 3 - 2*r;
     b22:	96 01       	movw	r18, r12
     b24:	22 0f       	add	r18, r18
     b26:	33 1f       	adc	r19, r19
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	3c 01       	movw	r6, r24
     b2e:	62 1a       	sub	r6, r18
     b30:	73 0a       	sbc	r7, r19
     b32:	68 94       	set
     b34:	aa 24       	eor	r10, r10
     b36:	a2 f8       	bld	r10, 2
     b38:	b1 2c       	mov	r11, r1
     b3a:	c0 e0       	ldi	r28, 0x00	; 0
     b3c:	d0 e0       	ldi	r29, 0x00	; 0
	while (y >= x) {
		x++;
     b3e:	21 96       	adiw	r28, 0x01	; 1
		
		if(d > 0) {
     b40:	16 14       	cp	r1, r6
     b42:	17 04       	cpc	r1, r7
     b44:	8c f4       	brge	.+34     	; 0xb68 <drawcircle+0x7e>
			y--;
     b46:	21 e0       	ldi	r18, 0x01	; 1
     b48:	c2 1a       	sub	r12, r18
     b4a:	d1 08       	sbc	r13, r1
			d = d + 4 * (x - y) + 5;
     b4c:	ce 01       	movw	r24, r28
     b4e:	8c 19       	sub	r24, r12
     b50:	9d 09       	sbc	r25, r13
     b52:	88 0f       	add	r24, r24
     b54:	99 1f       	adc	r25, r25
     b56:	88 0f       	add	r24, r24
     b58:	99 1f       	adc	r25, r25
     b5a:	86 0d       	add	r24, r6
     b5c:	97 1d       	adc	r25, r7
     b5e:	3c 01       	movw	r6, r24
     b60:	25 e0       	ldi	r18, 0x05	; 5
     b62:	62 0e       	add	r6, r18
     b64:	71 1c       	adc	r7, r1
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <drawcircle+0x82>
			} else {
			d = d + 4*x; // was + 6
     b68:	6a 0c       	add	r6, r10
     b6a:	7b 1c       	adc	r7, r11
		}
		dC(buff, x0, y0, x, y, color);
     b6c:	e4 2c       	mov	r14, r4
     b6e:	86 01       	movw	r16, r12
     b70:	9e 01       	movw	r18, r28
     b72:	45 2d       	mov	r20, r5
     b74:	6f 2d       	mov	r22, r15
     b76:	c4 01       	movw	r24, r8
     b78:	0e 94 1f 05 	call	0xa3e	; 0xa3e <dC>
     b7c:	84 e0       	ldi	r24, 0x04	; 4
     b7e:	a8 0e       	add	r10, r24
     b80:	b1 1c       	adc	r11, r1
void drawcircle(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t r,uint8_t color) {
	int x = 0;
	int y = r;
	dC(buff, x0, y0, x, y, color);
	int d = 3 - 2*r;
	while (y >= x) {
     b82:	cc 16       	cp	r12, r28
     b84:	dd 06       	cpc	r13, r29
     b86:	dc f6       	brge	.-74     	; 0xb3e <drawcircle+0x54>
			} else {
			d = d + 4*x; // was + 6
		}
		dC(buff, x0, y0, x, y, color);
	}
}
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	df 90       	pop	r13
     b96:	cf 90       	pop	r12
     b98:	bf 90       	pop	r11
     b9a:	af 90       	pop	r10
     b9c:	9f 90       	pop	r9
     b9e:	8f 90       	pop	r8
     ba0:	7f 90       	pop	r7
     ba2:	6f 90       	pop	r6
     ba4:	5f 90       	pop	r5
     ba6:	4f 90       	pop	r4
     ba8:	08 95       	ret

00000baa <fC>:



void fC(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x, uint8_t y, uint8_t color) {
     baa:	9f 92       	push	r9
     bac:	af 92       	push	r10
     bae:	bf 92       	push	r11
     bb0:	cf 92       	push	r12
     bb2:	df 92       	push	r13
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	6c 01       	movw	r12, r24
     bc2:	c6 2f       	mov	r28, r22
     bc4:	d4 2f       	mov	r29, r20
     bc6:	f2 2e       	mov	r15, r18
     bc8:	b0 2e       	mov	r11, r16
	drawline(buff, x0-x, y0+y, x0+x, y0+y, color);
     bca:	96 2e       	mov	r9, r22
     bcc:	92 0e       	add	r9, r18
     bce:	40 0f       	add	r20, r16
     bd0:	a6 2e       	mov	r10, r22
     bd2:	a2 1a       	sub	r10, r18
     bd4:	04 2f       	mov	r16, r20
     bd6:	29 2d       	mov	r18, r9
     bd8:	6a 2d       	mov	r22, r10
     bda:	0e 94 0d 04 	call	0x81a	; 0x81a <drawline>
	drawline(buff, x0-x, y0-y, x0+x, y0-y, color);
     bde:	4d 2f       	mov	r20, r29
     be0:	4b 19       	sub	r20, r11
     be2:	04 2f       	mov	r16, r20
     be4:	29 2d       	mov	r18, r9
     be6:	6a 2d       	mov	r22, r10
     be8:	c6 01       	movw	r24, r12
     bea:	0e 94 0d 04 	call	0x81a	; 0x81a <drawline>
	drawline(buff, x0-y, y0+x, x0+y, y0+x, color);
     bee:	ab 2c       	mov	r10, r11
     bf0:	ac 0e       	add	r10, r28
     bf2:	4d 2f       	mov	r20, r29
     bf4:	4f 0d       	add	r20, r15
     bf6:	cb 19       	sub	r28, r11
     bf8:	04 2f       	mov	r16, r20
     bfa:	2a 2d       	mov	r18, r10
     bfc:	6c 2f       	mov	r22, r28
     bfe:	c6 01       	movw	r24, r12
     c00:	0e 94 0d 04 	call	0x81a	; 0x81a <drawline>
	drawline(buff, x0-y, y0-x, x0+y, y0-x, color);
     c04:	4d 2f       	mov	r20, r29
     c06:	4f 19       	sub	r20, r15
     c08:	04 2f       	mov	r16, r20
     c0a:	2a 2d       	mov	r18, r10
     c0c:	6c 2f       	mov	r22, r28
     c0e:	c6 01       	movw	r24, r12
     c10:	0e 94 0d 04 	call	0x81a	; 0x81a <drawline>
}
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	ef 90       	pop	r14
     c20:	df 90       	pop	r13
     c22:	cf 90       	pop	r12
     c24:	bf 90       	pop	r11
     c26:	af 90       	pop	r10
     c28:	9f 90       	pop	r9
     c2a:	08 95       	ret

00000c2c <fillcircle>:

// function to draw a filled circle
void fillcircle(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t r,uint8_t color) {
     c2c:	9f 92       	push	r9
     c2e:	af 92       	push	r10
     c30:	bf 92       	push	r11
     c32:	cf 92       	push	r12
     c34:	df 92       	push	r13
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	6c 01       	movw	r12, r24
     c44:	16 2f       	mov	r17, r22
     c46:	f4 2e       	mov	r15, r20
     c48:	d2 2f       	mov	r29, r18
     c4a:	90 2e       	mov	r9, r16
	uint8_t x = 0;
	uint8_t y = r;
	fC(buff, x0, y0, x, y, color);
     c4c:	e0 2e       	mov	r14, r16
     c4e:	02 2f       	mov	r16, r18
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	0e 94 d5 05 	call	0xbaa	; 0xbaa <fC>
	int d = 3 - 2*r;
     c56:	2d 2f       	mov	r18, r29
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	22 0f       	add	r18, r18
     c5c:	33 1f       	adc	r19, r19
     c5e:	83 e0       	ldi	r24, 0x03	; 3
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	5c 01       	movw	r10, r24
     c64:	a2 1a       	sub	r10, r18
     c66:	b3 0a       	sbc	r11, r19
	drawline(buff, x0-y, y0-x, x0+y, y0-x, color);
}

// function to draw a filled circle
void fillcircle(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t r,uint8_t color) {
	uint8_t x = 0;
     c68:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t y = r;
	fC(buff, x0, y0, x, y, color);
	int d = 3 - 2*r;
	while (y >= x) {
		x++;
     c6a:	cf 5f       	subi	r28, 0xFF	; 255
		
		if(d > 0) {
     c6c:	1a 14       	cp	r1, r10
     c6e:	1b 04       	cpc	r1, r11
     c70:	84 f4       	brge	.+32     	; 0xc92 <fillcircle+0x66>
			y--;
     c72:	d1 50       	subi	r29, 0x01	; 1
			d = d +4 * (x - y) + 5;
     c74:	8c 2f       	mov	r24, r28
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	8d 1b       	sub	r24, r29
     c7a:	91 09       	sbc	r25, r1
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	8a 0d       	add	r24, r10
     c86:	9b 1d       	adc	r25, r11
     c88:	5c 01       	movw	r10, r24
     c8a:	25 e0       	ldi	r18, 0x05	; 5
     c8c:	a2 0e       	add	r10, r18
     c8e:	b1 1c       	adc	r11, r1
     c90:	05 c0       	rjmp	.+10     	; 0xc9c <fillcircle+0x70>
			} else {
			d = d + 4*x + 0; // was + 6
     c92:	84 e0       	ldi	r24, 0x04	; 4
     c94:	c8 9f       	mul	r28, r24
     c96:	a0 0c       	add	r10, r0
     c98:	b1 1c       	adc	r11, r1
     c9a:	11 24       	eor	r1, r1
		}
		fC(buff, x0, y0, x, y, color);
     c9c:	e9 2c       	mov	r14, r9
     c9e:	0d 2f       	mov	r16, r29
     ca0:	2c 2f       	mov	r18, r28
     ca2:	4f 2d       	mov	r20, r15
     ca4:	61 2f       	mov	r22, r17
     ca6:	c6 01       	movw	r24, r12
     ca8:	0e 94 d5 05 	call	0xbaa	; 0xbaa <fC>
void fillcircle(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t r,uint8_t color) {
	uint8_t x = 0;
	uint8_t y = r;
	fC(buff, x0, y0, x, y, color);
	int d = 3 - 2*r;
	while (y >= x) {
     cac:	dc 17       	cp	r29, r28
     cae:	e8 f6       	brcc	.-70     	; 0xc6a <fillcircle+0x3e>
			} else {
			d = d + 4*x + 0; // was + 6
		}
		fC(buff, x0, y0, x, y, color);
	}
}
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	df 90       	pop	r13
     cbe:	cf 90       	pop	r12
     cc0:	bf 90       	pop	r11
     cc2:	af 90       	pop	r10
     cc4:	9f 90       	pop	r9
     cc6:	08 95       	ret

00000cc8 <analogSetUp>:
	PORTC |= (1 << PINC0);
	PORTC &= ~(1 << PINC1) & ~(1 << PINC3) & ~(1 << PINC2); 
	return adc_read(3);
}

void detectInput() {
     cc8:	ec e7       	ldi	r30, 0x7C	; 124
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	80 64       	ori	r24, 0x40	; 64
     cd0:	80 83       	st	Z, r24
     cd2:	ea e7       	ldi	r30, 0x7A	; 122
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	80 68       	ori	r24, 0x80	; 128
     cda:	80 83       	st	Z, r24
     cdc:	80 81       	ld	r24, Z
     cde:	82 60       	ori	r24, 0x02	; 2
     ce0:	80 83       	st	Z, r24
     ce2:	39 98       	cbi	0x07, 1	; 7
     ce4:	38 9a       	sbi	0x07, 0	; 7
     ce6:	40 9a       	sbi	0x08, 0	; 8
     ce8:	08 95       	ret

00000cea <main>:
	//
}


int main(void)
{
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	28 97       	sbiw	r28, 0x08	; 8
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
	//setting up the gpio for backlight
	DDRD |= 0x80;
     cfe:	57 9a       	sbi	0x0a, 7	; 10
	PORTD &= ~0x80;
     d00:	5f 98       	cbi	0x0b, 7	; 11
	PORTD |= 0x00;
     d02:	8b b1       	in	r24, 0x0b	; 11
     d04:	8b b9       	out	0x0b, r24	; 11
	
	DDRB |= 0x05;
     d06:	84 b1       	in	r24, 0x04	; 4
     d08:	85 60       	ori	r24, 0x05	; 5
     d0a:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~0x05;
     d0c:	85 b1       	in	r24, 0x05	; 5
     d0e:	8a 7f       	andi	r24, 0xFA	; 250
     d10:	85 b9       	out	0x05, r24	; 5
	PORTB |= 0x00;
     d12:	85 b1       	in	r24, 0x05	; 5
     d14:	85 b9       	out	0x05, r24	; 5
	
	//lcd initialisation
	lcd_init();
     d16:	0e 94 e7 02 	call	0x5ce	; 0x5ce <lcd_init>
	lcd_command(CMD_DISPLAY_ON);
     d1a:	8f ea       	ldi	r24, 0xAF	; 175
     d1c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
	lcd_set_brightness(0x18);
     d20:	88 e1       	ldi	r24, 0x18	; 24
     d22:	0e 94 39 03 	call	0x672	; 0x672 <lcd_set_brightness>
	write_buffer(buff);
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	0e 94 44 03 	call	0x688	; 0x688 <write_buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d2e:	2f ef       	ldi	r18, 0xFF	; 255
     d30:	83 ed       	ldi	r24, 0xD3	; 211
     d32:	90 e3       	ldi	r25, 0x30	; 48
     d34:	21 50       	subi	r18, 0x01	; 1
     d36:	80 40       	sbci	r24, 0x00	; 0
     d38:	90 40       	sbci	r25, 0x00	; 0
     d3a:	e1 f7       	brne	.-8      	; 0xd34 <main+0x4a>
     d3c:	00 c0       	rjmp	.+0      	; 0xd3e <main+0x54>
     d3e:	00 00       	nop
	_delay_ms(1000);
	clear_buffer(buff);
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	0e 94 83 03 	call	0x706	; 0x706 <clear_buffer>
	uint8_t st[8] = "pong\0";
     d48:	86 e0       	ldi	r24, 0x06	; 6
     d4a:	e0 e1       	ldi	r30, 0x10	; 16
     d4c:	f5 e0       	ldi	r31, 0x05	; 5
     d4e:	de 01       	movw	r26, r28
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	01 90       	ld	r0, Z+
     d54:	0d 92       	st	X+, r0
     d56:	8a 95       	dec	r24
     d58:	e1 f7       	brne	.-8      	; 0xd52 <main+0x68>
     d5a:	18 86       	std	Y+8, r1	; 0x08
     d5c:	1f 82       	std	Y+7, r1	; 0x07
	int dx = 0;
	int dy = 0;
	int rad = 5;
	while (1)
	{
		analogSetUp();
     d5e:	0e 94 64 06 	call	0xcc8	; 0xcc8 <analogSetUp>
		clear_buffer(buff);
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	0e 94 83 03 	call	0x706	; 0x706 <clear_buffer>
		lcd_set_brightness(0x18);
     d6a:	88 e1       	ldi	r24, 0x18	; 24
     d6c:	0e 94 39 03 	call	0x672	; 0x672 <lcd_set_brightness>
		drawstring(buff,0,0,st);
     d70:	9e 01       	movw	r18, r28
     d72:	2f 5f       	subi	r18, 0xFF	; 255
     d74:	3f 4f       	sbci	r19, 0xFF	; 255
     d76:	40 e0       	ldi	r20, 0x00	; 0
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <drawstring>
		
		setpixel(buff, 60, 5, 1); 
     d82:	21 e0       	ldi	r18, 0x01	; 1
     d84:	45 e0       	ldi	r20, 0x05	; 5
     d86:	6c e3       	ldi	r22, 0x3C	; 60
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	0e 94 c7 03 	call	0x78e	; 0x78e <setpixel>
		
		drawline(buff, 0, 0, 100, 40, 1); 
     d90:	ee 24       	eor	r14, r14
     d92:	e3 94       	inc	r14
     d94:	08 e2       	ldi	r16, 0x28	; 40
     d96:	24 e6       	ldi	r18, 0x64	; 100
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	0e 94 0d 04 	call	0x81a	; 0x81a <drawline>
		
		drawrect(buff, 12, 12, 100, 20, 1);
     da4:	04 e1       	ldi	r16, 0x14	; 20
     da6:	24 e6       	ldi	r18, 0x64	; 100
     da8:	4c e0       	ldi	r20, 0x0C	; 12
     daa:	6c e0       	ldi	r22, 0x0C	; 12
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <drawrect>
		fillrect(buff, 10, 50, 30, 10, 1);
     db4:	0a e0       	ldi	r16, 0x0A	; 10
     db6:	2e e1       	ldi	r18, 0x1E	; 30
     db8:	42 e3       	ldi	r20, 0x32	; 50
     dba:	6a e0       	ldi	r22, 0x0A	; 10
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	0e 94 b9 04 	call	0x972	; 0x972 <fillrect>
		
		drawcircle(buff, 80, 30, 20, 1);
     dc4:	01 e0       	ldi	r16, 0x01	; 1
     dc6:	24 e1       	ldi	r18, 0x14	; 20
     dc8:	4e e1       	ldi	r20, 0x1E	; 30
     dca:	60 e5       	ldi	r22, 0x50	; 80
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	0e 94 75 05 	call	0xaea	; 0xaea <drawcircle>
		fillcircle(buff, x, y, rad, 1);
     dd4:	25 e0       	ldi	r18, 0x05	; 5
     dd6:	4e e1       	ldi	r20, 0x1E	; 30
     dd8:	6e e1       	ldi	r22, 0x1E	; 30
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	0e 94 16 06 	call	0xc2c	; 0xc2c <fillcircle>
		write_buffer(buff);
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	0e 94 44 03 	call	0x688	; 0x688 <write_buffer>
     dea:	2f ef       	ldi	r18, 0xFF	; 255
     dec:	81 ee       	ldi	r24, 0xE1	; 225
     dee:	94 e0       	ldi	r25, 0x04	; 4
     df0:	21 50       	subi	r18, 0x01	; 1
     df2:	80 40       	sbci	r24, 0x00	; 0
     df4:	90 40       	sbci	r25, 0x00	; 0
     df6:	e1 f7       	brne	.-8      	; 0xdf0 <main+0x106>
     df8:	00 c0       	rjmp	.+0      	; 0xdfa <main+0x110>
     dfa:	00 00       	nop
     dfc:	b0 cf       	rjmp	.-160    	; 0xd5e <main+0x74>

00000dfe <__subsf3>:
     dfe:	50 58       	subi	r21, 0x80	; 128

00000e00 <__addsf3>:
     e00:	bb 27       	eor	r27, r27
     e02:	aa 27       	eor	r26, r26
     e04:	0e 94 17 07 	call	0xe2e	; 0xe2e <__addsf3x>
     e08:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__fp_round>
     e0c:	0e 94 4d 08 	call	0x109a	; 0x109a <__fp_pscA>
     e10:	38 f0       	brcs	.+14     	; 0xe20 <__addsf3+0x20>
     e12:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__fp_pscB>
     e16:	20 f0       	brcs	.+8      	; 0xe20 <__addsf3+0x20>
     e18:	39 f4       	brne	.+14     	; 0xe28 <__addsf3+0x28>
     e1a:	9f 3f       	cpi	r25, 0xFF	; 255
     e1c:	19 f4       	brne	.+6      	; 0xe24 <__addsf3+0x24>
     e1e:	26 f4       	brtc	.+8      	; 0xe28 <__addsf3+0x28>
     e20:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__fp_nan>
     e24:	0e f4       	brtc	.+2      	; 0xe28 <__addsf3+0x28>
     e26:	e0 95       	com	r30
     e28:	e7 fb       	bst	r30, 7
     e2a:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__fp_inf>

00000e2e <__addsf3x>:
     e2e:	e9 2f       	mov	r30, r25
     e30:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_split3>
     e34:	58 f3       	brcs	.-42     	; 0xe0c <__addsf3+0xc>
     e36:	ba 17       	cp	r27, r26
     e38:	62 07       	cpc	r22, r18
     e3a:	73 07       	cpc	r23, r19
     e3c:	84 07       	cpc	r24, r20
     e3e:	95 07       	cpc	r25, r21
     e40:	20 f0       	brcs	.+8      	; 0xe4a <__addsf3x+0x1c>
     e42:	79 f4       	brne	.+30     	; 0xe62 <__addsf3x+0x34>
     e44:	a6 f5       	brtc	.+104    	; 0xeae <__addsf3x+0x80>
     e46:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_zero>
     e4a:	0e f4       	brtc	.+2      	; 0xe4e <__addsf3x+0x20>
     e4c:	e0 95       	com	r30
     e4e:	0b 2e       	mov	r0, r27
     e50:	ba 2f       	mov	r27, r26
     e52:	a0 2d       	mov	r26, r0
     e54:	0b 01       	movw	r0, r22
     e56:	b9 01       	movw	r22, r18
     e58:	90 01       	movw	r18, r0
     e5a:	0c 01       	movw	r0, r24
     e5c:	ca 01       	movw	r24, r20
     e5e:	a0 01       	movw	r20, r0
     e60:	11 24       	eor	r1, r1
     e62:	ff 27       	eor	r31, r31
     e64:	59 1b       	sub	r21, r25
     e66:	99 f0       	breq	.+38     	; 0xe8e <__addsf3x+0x60>
     e68:	59 3f       	cpi	r21, 0xF9	; 249
     e6a:	50 f4       	brcc	.+20     	; 0xe80 <__addsf3x+0x52>
     e6c:	50 3e       	cpi	r21, 0xE0	; 224
     e6e:	68 f1       	brcs	.+90     	; 0xeca <__addsf3x+0x9c>
     e70:	1a 16       	cp	r1, r26
     e72:	f0 40       	sbci	r31, 0x00	; 0
     e74:	a2 2f       	mov	r26, r18
     e76:	23 2f       	mov	r18, r19
     e78:	34 2f       	mov	r19, r20
     e7a:	44 27       	eor	r20, r20
     e7c:	58 5f       	subi	r21, 0xF8	; 248
     e7e:	f3 cf       	rjmp	.-26     	; 0xe66 <__addsf3x+0x38>
     e80:	46 95       	lsr	r20
     e82:	37 95       	ror	r19
     e84:	27 95       	ror	r18
     e86:	a7 95       	ror	r26
     e88:	f0 40       	sbci	r31, 0x00	; 0
     e8a:	53 95       	inc	r21
     e8c:	c9 f7       	brne	.-14     	; 0xe80 <__addsf3x+0x52>
     e8e:	7e f4       	brtc	.+30     	; 0xeae <__addsf3x+0x80>
     e90:	1f 16       	cp	r1, r31
     e92:	ba 0b       	sbc	r27, r26
     e94:	62 0b       	sbc	r22, r18
     e96:	73 0b       	sbc	r23, r19
     e98:	84 0b       	sbc	r24, r20
     e9a:	ba f0       	brmi	.+46     	; 0xeca <__addsf3x+0x9c>
     e9c:	91 50       	subi	r25, 0x01	; 1
     e9e:	a1 f0       	breq	.+40     	; 0xec8 <__addsf3x+0x9a>
     ea0:	ff 0f       	add	r31, r31
     ea2:	bb 1f       	adc	r27, r27
     ea4:	66 1f       	adc	r22, r22
     ea6:	77 1f       	adc	r23, r23
     ea8:	88 1f       	adc	r24, r24
     eaa:	c2 f7       	brpl	.-16     	; 0xe9c <__addsf3x+0x6e>
     eac:	0e c0       	rjmp	.+28     	; 0xeca <__addsf3x+0x9c>
     eae:	ba 0f       	add	r27, r26
     eb0:	62 1f       	adc	r22, r18
     eb2:	73 1f       	adc	r23, r19
     eb4:	84 1f       	adc	r24, r20
     eb6:	48 f4       	brcc	.+18     	; 0xeca <__addsf3x+0x9c>
     eb8:	87 95       	ror	r24
     eba:	77 95       	ror	r23
     ebc:	67 95       	ror	r22
     ebe:	b7 95       	ror	r27
     ec0:	f7 95       	ror	r31
     ec2:	9e 3f       	cpi	r25, 0xFE	; 254
     ec4:	08 f0       	brcs	.+2      	; 0xec8 <__addsf3x+0x9a>
     ec6:	b0 cf       	rjmp	.-160    	; 0xe28 <__addsf3+0x28>
     ec8:	93 95       	inc	r25
     eca:	88 0f       	add	r24, r24
     ecc:	08 f0       	brcs	.+2      	; 0xed0 <__addsf3x+0xa2>
     ece:	99 27       	eor	r25, r25
     ed0:	ee 0f       	add	r30, r30
     ed2:	97 95       	ror	r25
     ed4:	87 95       	ror	r24
     ed6:	08 95       	ret

00000ed8 <__cmpsf2>:
     ed8:	0e 94 20 08 	call	0x1040	; 0x1040 <__fp_cmp>
     edc:	08 f4       	brcc	.+2      	; 0xee0 <__cmpsf2+0x8>
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	08 95       	ret

00000ee2 <__divsf3>:
     ee2:	0e 94 85 07 	call	0xf0a	; 0xf0a <__divsf3x>
     ee6:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__fp_round>
     eea:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__fp_pscB>
     eee:	58 f0       	brcs	.+22     	; 0xf06 <__divsf3+0x24>
     ef0:	0e 94 4d 08 	call	0x109a	; 0x109a <__fp_pscA>
     ef4:	40 f0       	brcs	.+16     	; 0xf06 <__divsf3+0x24>
     ef6:	29 f4       	brne	.+10     	; 0xf02 <__divsf3+0x20>
     ef8:	5f 3f       	cpi	r21, 0xFF	; 255
     efa:	29 f0       	breq	.+10     	; 0xf06 <__divsf3+0x24>
     efc:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__fp_inf>
     f00:	51 11       	cpse	r21, r1
     f02:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_szero>
     f06:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__fp_nan>

00000f0a <__divsf3x>:
     f0a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_split3>
     f0e:	68 f3       	brcs	.-38     	; 0xeea <__divsf3+0x8>

00000f10 <__divsf3_pse>:
     f10:	99 23       	and	r25, r25
     f12:	b1 f3       	breq	.-20     	; 0xf00 <__divsf3+0x1e>
     f14:	55 23       	and	r21, r21
     f16:	91 f3       	breq	.-28     	; 0xefc <__divsf3+0x1a>
     f18:	95 1b       	sub	r25, r21
     f1a:	55 0b       	sbc	r21, r21
     f1c:	bb 27       	eor	r27, r27
     f1e:	aa 27       	eor	r26, r26
     f20:	62 17       	cp	r22, r18
     f22:	73 07       	cpc	r23, r19
     f24:	84 07       	cpc	r24, r20
     f26:	38 f0       	brcs	.+14     	; 0xf36 <__divsf3_pse+0x26>
     f28:	9f 5f       	subi	r25, 0xFF	; 255
     f2a:	5f 4f       	sbci	r21, 0xFF	; 255
     f2c:	22 0f       	add	r18, r18
     f2e:	33 1f       	adc	r19, r19
     f30:	44 1f       	adc	r20, r20
     f32:	aa 1f       	adc	r26, r26
     f34:	a9 f3       	breq	.-22     	; 0xf20 <__divsf3_pse+0x10>
     f36:	35 d0       	rcall	.+106    	; 0xfa2 <__divsf3_pse+0x92>
     f38:	0e 2e       	mov	r0, r30
     f3a:	3a f0       	brmi	.+14     	; 0xf4a <__divsf3_pse+0x3a>
     f3c:	e0 e8       	ldi	r30, 0x80	; 128
     f3e:	32 d0       	rcall	.+100    	; 0xfa4 <__divsf3_pse+0x94>
     f40:	91 50       	subi	r25, 0x01	; 1
     f42:	50 40       	sbci	r21, 0x00	; 0
     f44:	e6 95       	lsr	r30
     f46:	00 1c       	adc	r0, r0
     f48:	ca f7       	brpl	.-14     	; 0xf3c <__divsf3_pse+0x2c>
     f4a:	2b d0       	rcall	.+86     	; 0xfa2 <__divsf3_pse+0x92>
     f4c:	fe 2f       	mov	r31, r30
     f4e:	29 d0       	rcall	.+82     	; 0xfa2 <__divsf3_pse+0x92>
     f50:	66 0f       	add	r22, r22
     f52:	77 1f       	adc	r23, r23
     f54:	88 1f       	adc	r24, r24
     f56:	bb 1f       	adc	r27, r27
     f58:	26 17       	cp	r18, r22
     f5a:	37 07       	cpc	r19, r23
     f5c:	48 07       	cpc	r20, r24
     f5e:	ab 07       	cpc	r26, r27
     f60:	b0 e8       	ldi	r27, 0x80	; 128
     f62:	09 f0       	breq	.+2      	; 0xf66 <__divsf3_pse+0x56>
     f64:	bb 0b       	sbc	r27, r27
     f66:	80 2d       	mov	r24, r0
     f68:	bf 01       	movw	r22, r30
     f6a:	ff 27       	eor	r31, r31
     f6c:	93 58       	subi	r25, 0x83	; 131
     f6e:	5f 4f       	sbci	r21, 0xFF	; 255
     f70:	3a f0       	brmi	.+14     	; 0xf80 <__divsf3_pse+0x70>
     f72:	9e 3f       	cpi	r25, 0xFE	; 254
     f74:	51 05       	cpc	r21, r1
     f76:	78 f0       	brcs	.+30     	; 0xf96 <__divsf3_pse+0x86>
     f78:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__fp_inf>
     f7c:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_szero>
     f80:	5f 3f       	cpi	r21, 0xFF	; 255
     f82:	e4 f3       	brlt	.-8      	; 0xf7c <__divsf3_pse+0x6c>
     f84:	98 3e       	cpi	r25, 0xE8	; 232
     f86:	d4 f3       	brlt	.-12     	; 0xf7c <__divsf3_pse+0x6c>
     f88:	86 95       	lsr	r24
     f8a:	77 95       	ror	r23
     f8c:	67 95       	ror	r22
     f8e:	b7 95       	ror	r27
     f90:	f7 95       	ror	r31
     f92:	9f 5f       	subi	r25, 0xFF	; 255
     f94:	c9 f7       	brne	.-14     	; 0xf88 <__divsf3_pse+0x78>
     f96:	88 0f       	add	r24, r24
     f98:	91 1d       	adc	r25, r1
     f9a:	96 95       	lsr	r25
     f9c:	87 95       	ror	r24
     f9e:	97 f9       	bld	r25, 7
     fa0:	08 95       	ret
     fa2:	e1 e0       	ldi	r30, 0x01	; 1
     fa4:	66 0f       	add	r22, r22
     fa6:	77 1f       	adc	r23, r23
     fa8:	88 1f       	adc	r24, r24
     faa:	bb 1f       	adc	r27, r27
     fac:	62 17       	cp	r22, r18
     fae:	73 07       	cpc	r23, r19
     fb0:	84 07       	cpc	r24, r20
     fb2:	ba 07       	cpc	r27, r26
     fb4:	20 f0       	brcs	.+8      	; 0xfbe <__divsf3_pse+0xae>
     fb6:	62 1b       	sub	r22, r18
     fb8:	73 0b       	sbc	r23, r19
     fba:	84 0b       	sbc	r24, r20
     fbc:	ba 0b       	sbc	r27, r26
     fbe:	ee 1f       	adc	r30, r30
     fc0:	88 f7       	brcc	.-30     	; 0xfa4 <__divsf3_pse+0x94>
     fc2:	e0 95       	com	r30
     fc4:	08 95       	ret

00000fc6 <__floatunsisf>:
     fc6:	e8 94       	clt
     fc8:	09 c0       	rjmp	.+18     	; 0xfdc <__floatsisf+0x12>

00000fca <__floatsisf>:
     fca:	97 fb       	bst	r25, 7
     fcc:	3e f4       	brtc	.+14     	; 0xfdc <__floatsisf+0x12>
     fce:	90 95       	com	r25
     fd0:	80 95       	com	r24
     fd2:	70 95       	com	r23
     fd4:	61 95       	neg	r22
     fd6:	7f 4f       	sbci	r23, 0xFF	; 255
     fd8:	8f 4f       	sbci	r24, 0xFF	; 255
     fda:	9f 4f       	sbci	r25, 0xFF	; 255
     fdc:	99 23       	and	r25, r25
     fde:	a9 f0       	breq	.+42     	; 0x100a <__floatsisf+0x40>
     fe0:	f9 2f       	mov	r31, r25
     fe2:	96 e9       	ldi	r25, 0x96	; 150
     fe4:	bb 27       	eor	r27, r27
     fe6:	93 95       	inc	r25
     fe8:	f6 95       	lsr	r31
     fea:	87 95       	ror	r24
     fec:	77 95       	ror	r23
     fee:	67 95       	ror	r22
     ff0:	b7 95       	ror	r27
     ff2:	f1 11       	cpse	r31, r1
     ff4:	f8 cf       	rjmp	.-16     	; 0xfe6 <__floatsisf+0x1c>
     ff6:	fa f4       	brpl	.+62     	; 0x1036 <__floatsisf+0x6c>
     ff8:	bb 0f       	add	r27, r27
     ffa:	11 f4       	brne	.+4      	; 0x1000 <__floatsisf+0x36>
     ffc:	60 ff       	sbrs	r22, 0
     ffe:	1b c0       	rjmp	.+54     	; 0x1036 <__floatsisf+0x6c>
    1000:	6f 5f       	subi	r22, 0xFF	; 255
    1002:	7f 4f       	sbci	r23, 0xFF	; 255
    1004:	8f 4f       	sbci	r24, 0xFF	; 255
    1006:	9f 4f       	sbci	r25, 0xFF	; 255
    1008:	16 c0       	rjmp	.+44     	; 0x1036 <__floatsisf+0x6c>
    100a:	88 23       	and	r24, r24
    100c:	11 f0       	breq	.+4      	; 0x1012 <__floatsisf+0x48>
    100e:	96 e9       	ldi	r25, 0x96	; 150
    1010:	11 c0       	rjmp	.+34     	; 0x1034 <__floatsisf+0x6a>
    1012:	77 23       	and	r23, r23
    1014:	21 f0       	breq	.+8      	; 0x101e <__floatsisf+0x54>
    1016:	9e e8       	ldi	r25, 0x8E	; 142
    1018:	87 2f       	mov	r24, r23
    101a:	76 2f       	mov	r23, r22
    101c:	05 c0       	rjmp	.+10     	; 0x1028 <__floatsisf+0x5e>
    101e:	66 23       	and	r22, r22
    1020:	71 f0       	breq	.+28     	; 0x103e <__floatsisf+0x74>
    1022:	96 e8       	ldi	r25, 0x86	; 134
    1024:	86 2f       	mov	r24, r22
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	60 e0       	ldi	r22, 0x00	; 0
    102a:	2a f0       	brmi	.+10     	; 0x1036 <__floatsisf+0x6c>
    102c:	9a 95       	dec	r25
    102e:	66 0f       	add	r22, r22
    1030:	77 1f       	adc	r23, r23
    1032:	88 1f       	adc	r24, r24
    1034:	da f7       	brpl	.-10     	; 0x102c <__floatsisf+0x62>
    1036:	88 0f       	add	r24, r24
    1038:	96 95       	lsr	r25
    103a:	87 95       	ror	r24
    103c:	97 f9       	bld	r25, 7
    103e:	08 95       	ret

00001040 <__fp_cmp>:
    1040:	99 0f       	add	r25, r25
    1042:	00 08       	sbc	r0, r0
    1044:	55 0f       	add	r21, r21
    1046:	aa 0b       	sbc	r26, r26
    1048:	e0 e8       	ldi	r30, 0x80	; 128
    104a:	fe ef       	ldi	r31, 0xFE	; 254
    104c:	16 16       	cp	r1, r22
    104e:	17 06       	cpc	r1, r23
    1050:	e8 07       	cpc	r30, r24
    1052:	f9 07       	cpc	r31, r25
    1054:	c0 f0       	brcs	.+48     	; 0x1086 <__fp_cmp+0x46>
    1056:	12 16       	cp	r1, r18
    1058:	13 06       	cpc	r1, r19
    105a:	e4 07       	cpc	r30, r20
    105c:	f5 07       	cpc	r31, r21
    105e:	98 f0       	brcs	.+38     	; 0x1086 <__fp_cmp+0x46>
    1060:	62 1b       	sub	r22, r18
    1062:	73 0b       	sbc	r23, r19
    1064:	84 0b       	sbc	r24, r20
    1066:	95 0b       	sbc	r25, r21
    1068:	39 f4       	brne	.+14     	; 0x1078 <__fp_cmp+0x38>
    106a:	0a 26       	eor	r0, r26
    106c:	61 f0       	breq	.+24     	; 0x1086 <__fp_cmp+0x46>
    106e:	23 2b       	or	r18, r19
    1070:	24 2b       	or	r18, r20
    1072:	25 2b       	or	r18, r21
    1074:	21 f4       	brne	.+8      	; 0x107e <__fp_cmp+0x3e>
    1076:	08 95       	ret
    1078:	0a 26       	eor	r0, r26
    107a:	09 f4       	brne	.+2      	; 0x107e <__fp_cmp+0x3e>
    107c:	a1 40       	sbci	r26, 0x01	; 1
    107e:	a6 95       	lsr	r26
    1080:	8f ef       	ldi	r24, 0xFF	; 255
    1082:	81 1d       	adc	r24, r1
    1084:	81 1d       	adc	r24, r1
    1086:	08 95       	ret

00001088 <__fp_inf>:
    1088:	97 f9       	bld	r25, 7
    108a:	9f 67       	ori	r25, 0x7F	; 127
    108c:	80 e8       	ldi	r24, 0x80	; 128
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	08 95       	ret

00001094 <__fp_nan>:
    1094:	9f ef       	ldi	r25, 0xFF	; 255
    1096:	80 ec       	ldi	r24, 0xC0	; 192
    1098:	08 95       	ret

0000109a <__fp_pscA>:
    109a:	00 24       	eor	r0, r0
    109c:	0a 94       	dec	r0
    109e:	16 16       	cp	r1, r22
    10a0:	17 06       	cpc	r1, r23
    10a2:	18 06       	cpc	r1, r24
    10a4:	09 06       	cpc	r0, r25
    10a6:	08 95       	ret

000010a8 <__fp_pscB>:
    10a8:	00 24       	eor	r0, r0
    10aa:	0a 94       	dec	r0
    10ac:	12 16       	cp	r1, r18
    10ae:	13 06       	cpc	r1, r19
    10b0:	14 06       	cpc	r1, r20
    10b2:	05 06       	cpc	r0, r21
    10b4:	08 95       	ret

000010b6 <__fp_round>:
    10b6:	09 2e       	mov	r0, r25
    10b8:	03 94       	inc	r0
    10ba:	00 0c       	add	r0, r0
    10bc:	11 f4       	brne	.+4      	; 0x10c2 <__fp_round+0xc>
    10be:	88 23       	and	r24, r24
    10c0:	52 f0       	brmi	.+20     	; 0x10d6 <__fp_round+0x20>
    10c2:	bb 0f       	add	r27, r27
    10c4:	40 f4       	brcc	.+16     	; 0x10d6 <__fp_round+0x20>
    10c6:	bf 2b       	or	r27, r31
    10c8:	11 f4       	brne	.+4      	; 0x10ce <__fp_round+0x18>
    10ca:	60 ff       	sbrs	r22, 0
    10cc:	04 c0       	rjmp	.+8      	; 0x10d6 <__fp_round+0x20>
    10ce:	6f 5f       	subi	r22, 0xFF	; 255
    10d0:	7f 4f       	sbci	r23, 0xFF	; 255
    10d2:	8f 4f       	sbci	r24, 0xFF	; 255
    10d4:	9f 4f       	sbci	r25, 0xFF	; 255
    10d6:	08 95       	ret

000010d8 <__fp_split3>:
    10d8:	57 fd       	sbrc	r21, 7
    10da:	90 58       	subi	r25, 0x80	; 128
    10dc:	44 0f       	add	r20, r20
    10de:	55 1f       	adc	r21, r21
    10e0:	59 f0       	breq	.+22     	; 0x10f8 <__fp_splitA+0x10>
    10e2:	5f 3f       	cpi	r21, 0xFF	; 255
    10e4:	71 f0       	breq	.+28     	; 0x1102 <__fp_splitA+0x1a>
    10e6:	47 95       	ror	r20

000010e8 <__fp_splitA>:
    10e8:	88 0f       	add	r24, r24
    10ea:	97 fb       	bst	r25, 7
    10ec:	99 1f       	adc	r25, r25
    10ee:	61 f0       	breq	.+24     	; 0x1108 <__fp_splitA+0x20>
    10f0:	9f 3f       	cpi	r25, 0xFF	; 255
    10f2:	79 f0       	breq	.+30     	; 0x1112 <__fp_splitA+0x2a>
    10f4:	87 95       	ror	r24
    10f6:	08 95       	ret
    10f8:	12 16       	cp	r1, r18
    10fa:	13 06       	cpc	r1, r19
    10fc:	14 06       	cpc	r1, r20
    10fe:	55 1f       	adc	r21, r21
    1100:	f2 cf       	rjmp	.-28     	; 0x10e6 <__fp_split3+0xe>
    1102:	46 95       	lsr	r20
    1104:	f1 df       	rcall	.-30     	; 0x10e8 <__fp_splitA>
    1106:	08 c0       	rjmp	.+16     	; 0x1118 <__fp_splitA+0x30>
    1108:	16 16       	cp	r1, r22
    110a:	17 06       	cpc	r1, r23
    110c:	18 06       	cpc	r1, r24
    110e:	99 1f       	adc	r25, r25
    1110:	f1 cf       	rjmp	.-30     	; 0x10f4 <__fp_splitA+0xc>
    1112:	86 95       	lsr	r24
    1114:	71 05       	cpc	r23, r1
    1116:	61 05       	cpc	r22, r1
    1118:	08 94       	sec
    111a:	08 95       	ret

0000111c <__fp_zero>:
    111c:	e8 94       	clt

0000111e <__fp_szero>:
    111e:	bb 27       	eor	r27, r27
    1120:	66 27       	eor	r22, r22
    1122:	77 27       	eor	r23, r23
    1124:	cb 01       	movw	r24, r22
    1126:	97 f9       	bld	r25, 7
    1128:	08 95       	ret

0000112a <__gesf2>:
    112a:	0e 94 20 08 	call	0x1040	; 0x1040 <__fp_cmp>
    112e:	08 f4       	brcc	.+2      	; 0x1132 <__gesf2+0x8>
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	08 95       	ret

00001134 <_exit>:
    1134:	f8 94       	cli

00001136 <__stop_program>:
    1136:	ff cf       	rjmp	.-2      	; 0x1136 <__stop_program>
